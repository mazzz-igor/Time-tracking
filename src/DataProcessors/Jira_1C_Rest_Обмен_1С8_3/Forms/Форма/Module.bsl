
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВосстановитьСтруктурыПараметров();
	СоздатьЭлементыФормыДляПараметров();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы Тогда
		ПередЗакрытиемНаСервере();
	Иначе
       Отказ = Истина;
       ТекстПредупреждения = "Значения параметров сохраняются при закрытии формы. 
	   |Для сохранения значений выберите ""Продолжить работу"", 
	   |Затем сперва закройте форму, а потом завершите работу с программой!";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	СохранитьПараметры();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТипыИСтатусыЗапросов_ПарамЗапросJira();
	ЗаполнитьПриоритеты_ПарамЗапросJira();
	ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
	ЗаполнитьПредПараметрыЗапросаПоОперацииНовыйИзменить();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПримерJiraIssueBrowseНажатие(Элемент)
	ПерейтиПоНавигационнойСсылке(Элемент.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ПримерJiraIssueJsonНажатие(Элемент)
	ПерейтиПоНавигационнойСсылке(Элемент.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗапросJiraJSONНажатие(Элемент)
	СсылкаRest = ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.key; 
	ПерейтиПоНавигационнойСсылке(СсылкаRest);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПарамСерверJiraПриИзменении(Элемент)
	лкИмя = Элемент.Имя; 
	лкЗн = ЭтаФорма[лкИмя];
	лкКлюч = СтрЗаменить(лкИмя,"ПарамСерверJira_","");
	ПарамСерверJira.Вставить(лкКлюч,лкЗн);		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПарамПользовательJiraПриИзменении(Элемент)
	лкИмя = Элемент.Имя; 
	лкЗн = ЭтаФорма[лкИмя];
	лкКлюч = СтрЗаменить(лкИмя,"ПарамПользовательJira_","");
	ПарамПользовательJira.Вставить(лкКлюч,лкЗн);		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПарамСписокЗапросовJiraПриИзменении(Элемент)
	лкИмя = Элемент.Имя; 
	лкЗн = ЭтаФорма[лкИмя];
	лкКлюч = СтрЗаменить(лкИмя,"ПарамСписокЗапросовJira_","");
	ПарамСписокЗапросовJira.Вставить(лкКлюч,лкЗн);
	Если Элемент.Имя ="ПарамСписокЗапросовJira_updated2" Тогда
		Если ЭтаФорма[Элемент.Имя] = НачалоДня(ЭтаФорма[Элемент.Имя]) Тогда
			ЭтаФорма[Элемент.Имя] = КонецДня(ЭтаФорма[Элемент.Имя]);	
			ПарамСписокЗапросовJira.Вставить(лкКлюч,ЭтаФорма[Элемент.Имя]);
		КонецЕсли;
		Если ЭтаФорма["ПарамСписокЗапросовJira_updated1"] > ЭтаФорма[Элемент.Имя] Тогда
			ЭтаФорма["ПарамСписокЗапросовJira_updated1"] = НачалоДня(ЭтаФорма[Элемент.Имя]-1);	
			ПарамСписокЗапросовJira.Вставить("updated1",ЭтаФорма["ПарамСписокЗапросовJira_updated1"]);
		КонецЕсли;	
	ИначеЕсли Элемент.Имя ="ПарамСписокЗапросовJira_updated1" Тогда 	
		Если ЭтаФорма["ПарамСписокЗапросовJira_updated2"] < ЭтаФорма[Элемент.Имя] Тогда
			ЭтаФорма["ПарамСписокЗапросовJira_updated2"] = КонецДня(ЭтаФорма[Элемент.Имя]+1);	
			ПарамСписокЗапросовJira.Вставить("updated2",ЭтаФорма["ПарамСписокЗапросовJira_updated2"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПарамЗапросJiraПриИзменении(Элемент)
	лкИмя = Элемент.Имя; 
	лкЗн = ЭтаФорма[лкИмя];
	лкКлюч = СтрЗаменить(лкИмя,"ПарамЗапросJira_","");
	ПарамЗапросJira.Вставить(лкКлюч,лкЗн);
	
	Если Элемент.Имя ="ПарамЗапросJira_ЗапросНовыйИзменить" Тогда
		ЗаполнитьПредПараметрыЗапросаПоОперацииНовыйИзменить();
	КонецЕсли;
	
	ОбновитьНадписиИДоступность = Ложь;
	Если ПредПарамЗапросJira.Свойство(лкКлюч) И ПредПарамЗапросJira[лкКлюч] <> ПарамЗапросJira[лкКлюч] Тогда
		ОбновитьНадписиИДоступность = Истина;
	КонецЕсли;
	
	Если Элемент.Имя ="ПарамЗапросJira_IssueType_Name" Тогда
		ЗаполнитьТипыИСтатусыЗапросов_ПарамЗапросJira();
	КонецЕсли;	
	
	Если ОбновитьНадписиИДоступность = Истина 
		ИЛИ Элемент.Имя ="ПарамЗапросJira_Key" 
		ИЛИ Элемент.Имя ="ПарамЗапросJira_ЗапросНовыйИзменить" 
		ИЛИ Элемент.Имя ="ПарамЗапросJira_IssueType_Name" 
		ИЛИ Элемент.Имя ="ПарамЗапросJira_Status_Name" 
		Тогда
		ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
	КонецЕсли;	

	
КонецПроцедуры


&НаКлиенте
Процедура АдресПарамПользовательJiraПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_JiraСписокЗапросов

&НаКлиенте
Процедура JiraСписокЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	Если Поле.Имя = "JiraСписокЗапросовBrowseLink" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ТекДанные.BrowseLink);
	ИначеЕсли Поле.Имя = "JiraСписокЗапросовSelf" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ТекДанные.Self);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура JiraСписокЗапросовПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.JiraСписокЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ДоступностьИзменить =  Ложь;
	иначе
	    ДоступностьИзменить =  Истина;
	КонецЕсли;
	Элементы.JiraСписокЗапросовИзменитьЗаписьСписокЗапросов.Доступность = ДоступностьИзменить;
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьСписокЗапросов(Команда)
	ПарамЗапросJira.Key = ""; 
	ЭтаФорма["ПарамЗапросJira_Key"] = "";
	ПарамЗапросJira.ЗапросНовыйИзменить = 0;
	ЭтаФорма["ПарамЗапросJira_ЗапросНовыйИзменить"] = 0;
	
	ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗапросJira;
	Элементы.СтраницыПоляИСвязанныеДанные.ТекущаяСтраница = Элементы.СтраницаКолокиПоляЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаписьСписокЗапросов(Команда)
	ТекДанные = Элементы.JiraСписокЗапросов.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПарамЗапросJira.Key = ТекДанные.Кey; 
		ЭтаФорма["ПарамЗапросJira_Key"] = ТекДанные.Кey;
		ПарамЗапросJira.ЗапросНовыйИзменить = 1;
		ЭтаФорма["ПарамЗапросJira_ЗапросНовыйИзменить"] = 1;
		
		
		Если НЕ ПроверитьИПодготовитьПараметрыДляЧтенияЗапросаJiraСервер() Тогда
			Возврат;	
		КонецЕсли;
		
		Отказ = Ложь;
		ПрочитатьЗапросОбработка(,Отказ);
		Если Не Отказ Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗапросJira;
			Элементы.СтраницыПоляИСвязанныеДанные.ТекущаяСтраница = Элементы.СтраницаКолокиПоляЗапроса;
		КонецЕсли;
	
	КонецЕсли;	

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_JiraЗапросWorkLog

&НаКлиенте
Процедура JiraЗапросWorkLogВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура JiraЗапросWorkLogПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.JiraЗапросWorkLog.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ДоступностьИзменить =  Ложь;
		ЗаписьWorklog_ID = "";
		Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Пометка = Ложь;
	иначе
	    ДоступностьИзменить =  Истина;
		ЗаписьWorklog_ID = ТекДанные.ID;
	КонецЕсли;
	Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Доступность = ДоступностьИзменить;
	Элементы.JiraЗапросWorkLogУдалитьЗаписьWorkLog.Доступность = ДоступностьИзменить;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросWorkLog(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляПрочитатьЗапросWorkLogСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = СтрШаблон("Получить из Jira записи о работах (work log) для запроса: %1 ?",ПарамЗапросJira.key);
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("ПрочитатьЗапросWorkLogЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросWorkLogЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПрочитатьЗапросWorkLogОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьЗапросWorkLog(Команда)
	ТекПометка = Элементы.JiraЗапросWorkLogНоваяЗаписьЗапросWorkLog.Пометка;
	ТекПометка = НЕ ТекПометка;
	Элементы.JiraЗапросWorkLogНоваяЗаписьЗапросWorkLog.Пометка = ТекПометка;
	Если ТекПометка = Истина Тогда
		ДобавитьИзменить = 0;
	Иначе
		ДобавитьИзменить = Неопределено;
	КонецЕсли;
	ОбновитьНадписиИДоступность_ЗаписьWorkLogJira_Сервер(ДобавитьИзменить);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаписьЗапросWorkLog(Команда)
	ТекПометка = Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Пометка;
	ТекПометка = НЕ ТекПометка;
	Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Пометка = ТекПометка;
	Если ТекПометка = Истина Тогда
		ДобавитьИзменить = 1;
	Иначе
		ДобавитьИзменить = Неопределено;
	КонецЕсли;
	ОбновитьНадписиИДоступность_ЗаписьWorkLogJira_Сервер(ДобавитьИзменить);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменитьЗаписьWorkLog(Команда)
	ОбновитьНадписиИДоступность_ЗаписьWorkLogJira_Сервер(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьЗаписьWorkLog(Команда)
	ДопПарам = Новый Структура("Операция","Создать");
	Если ЗаписьWorklog_ДобавитьИзменить = 1 Тогда
		ДопПарам.Операция = "Обновить";
		ДопПарам.Вставить("ТекущаяЗаписьID",ЗаписьWorklog_ID);
	КонецЕсли;
	СоздатьОбновитьУдалитьЗаписьWorkLogОбработка(ДопПарам);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписьWorkLog(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляУдалитьЗаписьWorkLogСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = СтрШаблон("Удалить запись о работе из Jira (ID = %1)?",ЗаписьWorklog_ID);
	ДопПарам = Новый Структура("Операция,ТекущаяЗаписьID","Удалить",ЗаписьWorklog_ID);
	ОпОп = Новый ОписаниеОповещения("УдалитьЗаписьWorkLogЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");

КонецПроцедуры


&НаКлиенте
Процедура УдалитьЗаписьWorkLogЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьОбновитьУдалитьЗаписьWorkLogОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_JiraЗапросComments

&НаКлиенте
Процедура JiraЗапросCommentsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	Если Поле.Имя = "JiraЗапросCommentsCommentLink" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ТекДанные.CommentLink);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросComments(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляПрочитатьCommentsСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = СтрШаблон("Получить из Jira комментарии для запроса: %1?",ПарамЗапросJira.key);
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("ПрочитатьЗапросCommentsЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросCommentsЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПрочитатьЗапросCommentsОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_JiraUsers

&НаКлиенте
Процедура JiraUsersПриИзменении(Элемент)
	ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТипыИСтатусыЗапросов(Команда)
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = "Выполнить запрос к Jira и заполнить таблицу типов запросов и статусов?";
	Если Объект.JiraТипыИСтатусыЗапросов.Количество()>0 Тогда
		ТекстВопроса = ТекстВопроса+"
		|Таблица с текущими данными будет очищена!";
	КонецЕсли;
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("ЗаполнитьТипыИСтатусыЗапросовЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыИСтатусыЗапросовЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТипыИСтатусыЗапросовОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗапросов(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляСпискаЗапросовJiraСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = СтрШаблон("Выполнить запрос к Jira и заполнить запросы измененные за период: (%1 - %2)?",ПарамСписокЗапросовJira.updated1,ПарамСписокЗапросовJira.updated2);
	Если Объект.JiraСписокЗапросов.Количество()>0 Тогда
		ТекстВопроса = ТекстВопроса+"
		|Таблица с текущими данными будет очищена!";
	КонецЕсли;
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("ЗаполнитьСписокЗапросовЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗапросовЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСписокЗапросовОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапрос(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляЧтенияЗапросаJiraСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = "Выполнить запрос к Jira и обновить реквизиты";
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("ПрочитатьЗапросЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПрочитатьЗапросОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОбновитьЗапрос(Команда)
	Если НЕ ПроверитьИПодготовитьПараметрыДляЗаписиЗапросаJiraСервер() Тогда
		Возврат;	
	КонецЕсли;
	ТекстВопроса = "Передать информацию для записи в Jira?";
	ДопПарам = Новый Структура();
	ОпОп = Новый ОписаниеОповещения("СоздатьОбновитьЗапросЗавершение", ЭтаФорма, ДопПарам);
	ПоказатьВопрос(ОпОп,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Запрос к Jira");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьЗапросЗавершение(РезультатВопроса, ДопПарам) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьОбновитьЗапросОбработка(ДопПарам);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВостановлениеИСохранениеПараметров

&НаСервере
Функция ПолучитьТЗШаблонОписанияПараметров()
	ТЗшаблон = Новый ТаблицаЗначений;
	ТЗшаблон.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
	ТЗшаблон.Колонки.Добавить("Заголовок",Новый ОписаниеТипов("Строка"));
	ТЗшаблон.Колонки.Добавить("Тип",Новый ОписаниеТипов("ОписаниеТипов"));
	ТЗшаблон.Колонки.Добавить("ПодсказкаВвода",Новый ОписаниеТипов("Строка"));
	ТЗшаблон.Колонки.Добавить("Подсказка",Новый ОписаниеТипов("Строка"));
	ТЗшаблон.Колонки.Добавить("Обязательный",Новый ОписаниеТипов("Булево"));
	ТЗшаблон.Колонки.Добавить("ИмяГруппыНаФорме",Новый ОписаниеТипов("Строка"));
	ТЗшаблон.Колонки.Добавить("Значение");
	Возврат ТЗшаблон;
КонецФункции

&НаСервере
Процедура ДобавитьОписаниеПараметраВСтруктуру(ТЗ, СтрукПарам, Имя, Заголовок, СтрокаТипы="Строка", ПодсказкаВвода="", Подсказка="", Обязательный = Ложь, ИмяГруппыНаФорме, Значение="" )
	лкКС = Новый КвалификаторыСтроки(100);
	лкКЧ = Новый КвалификаторыЧисла(15,2);
	
	СтрукПарам.Вставить(Имя);
	НовСтр = ТЗ.Добавить();
	НовСтр.Имя = Имя;
	НовСтр.Заголовок = Заголовок;
	Если ТипЗнч(СтрокаТипы) = Тип("Строка") Тогда
		НовСтр.Тип = Новый ОписаниеТипов(СтрокаТипы,лкКЧ,лкКС);
	иначе
		НовСтр.Тип = СтрокаТипы;
	КонецЕсли;
	НовСтр.ПодсказкаВвода = ПодсказкаВвода;
	НовСтр.Подсказка = Подсказка;
	НовСтр.Обязательный = Обязательный;
	НовСтр.ИмяГруппыНаФорме = ИмяГруппыНаФорме;
	Если ЗначениеЗаполнено(Значение) Тогда
		НовСтр.Значение = Значение;
		СтрукПарам[Имя] = Значение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТекущуюСтруктуруПараметров(ИмяСохрПарам,тзПарам,СтрукПарам,АдресПарам)
	СохрПарам = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.Jira_1C_Rest_Обмен_1С8_3",ИмяСохрПарам);
	ЕстьСохрПарам = (ТипЗнч(СохрПарам) = Тип("ТаблицаЗначений"));
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если ЕстьСохрПарам Тогда
			СтрСохрПарам = сохрПарам.Найти(СтрПарам.Имя,"Имя");
			Если НЕ СтрСохрПарам = Неопределено И ЗначениеЗаполнено(СтрСохрПарам.Значение) Тогда
				СтрПарам.Значение = СтрСохрПарам.Значение;
			КонецЕсли;
		КонецЕсли;
		СтрукПарам.Вставить(СтрПарам.Имя,СтрПарам.Значение);	
	КонецЦикла;
	АдресПарам = ПоместитьВоВременноеХранилище(тзПарам,УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтруктурыПараметров()
	ТЗшаблон = ПолучитьТЗШаблонОписанияПараметров();
	
	ПарамСерверJira = Новый Структура;
	
	//тзПарамСерверJira
	тзПарамСерверJira = ТЗшаблон.СкопироватьКолонки();
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraСерверПротокол","Протокол", ,"https://", "Примеры: https://, http://", Истина, "ГруппаПарамСерверJiraАдрес", "https://");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraСерверHost","Сервер", ,"jira.myserver.com:8080", "Примеры: jira.atlassian.com, jira.myserver.com:8080",Истина,"ГруппаПарамСерверJiraАдрес");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraАдресRestAPI","Ссылка REST API", ,"/rest/api/latest", "",Истина,"ГруппаПарамСерверJira","/rest/api/latest");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraCustomField_EpicLink","Поле Jira epic link", ,"customfield_10006", "Поле запроса (сustom field) со ссылкой на epic. 
			|Используется только если запрос необходимо связать с Epic-ом,",Ложь,"ГруппаПарамСерверJira");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraCustomField_EpicName","Поле Jira epic name", ,"customfield_10005", "Поле запроса (сustom field) с именем epic-а. 
			|Используется только для запросов с типом ""Epic""",Ложь,"ГруппаПарамСерверJira");		
	
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСерверJira,ПарамСерверJira,
		"JiraProjectKey","Ключ проекта Jira", ,"JRACLOUD", "Например для запроса: https://jira.atlassian.com/browse/JRACLOUD-34423, 
			|ключ проекта = ""JRACLOUD""",Истина,"ГруппаПарамПроектаJira");		
	
	ВосстановитьТекущуюСтруктуруПараметров("тзПарамСерверJira",тзПарамСерверJira,ПарамСерверJira,АдресПарамСерверJira);
	
	//тзПарамПользовательJira
	ПарамПользовательJira = Новый Структура;
	тзПарамПользовательJira = ТЗшаблон.СкопироватьКолонки();
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамПользовательJira,ПарамПользовательJira,
		"JiraUserName","Пользователь Jira",,"Пользователь для подключения","Имя пользователя для подключения к Jira",Истина,"ГруппаПарамПользовательJira");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамПользовательJira,ПарамПользовательJira,
		"JiraUserPass","Пароль Jira",,"Пароль для подключения","Пароль пользователя для подключения к Jira",Истина,"ГруппаПарамПользовательJira");	
	
	ВосстановитьТекущуюСтруктуруПараметров("тзПарамПользовательJira",тзПарамПользовательJira,ПарамПользовательJira,АдресПарамПользовательJira);

	//тзПарамСписокЗапросовJira
	ПарамСписокЗапросовJira = Новый Структура;
	тзПарамСписокЗапросовJira = ТЗшаблон.СкопироватьКолонки();
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,
		"updated1","Начало",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)),"","Начало периода для измененных запросов",Истина,"ГруппаСписокЗапросовПериодВыборки");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,
		"updated2","Окончание",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)),"","Окончание периода для измененных запросов",Истина,"ГруппаСписокЗапросовПериодВыборки");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,
		"ШаблонJQL","Шаблон запроса JQL для выборки данных",,,"Шаблон запроса JQL к JIRA для получения выборки за период",Истина,"ГруппаШаблонJQLЗапроса","project = '[ProjectKey]' & updated>= '[updated1]' & updated <= '[updated2]'");		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,
		"ВсегоВыбрать","Всего выбрать",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)),,"Будет выбрано записей не более чем указано",Истина,"ГруппаСписокЗапросовПорции",500);		
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,
		"РазмерПорции","Размер порции",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)),,"Выборка осуществляется несколькими порциями, каждая из которых не больше указанной",Истина,"ГруппаСписокЗапросовПорции",100);		
	
	//
	ВосстановитьТекущуюСтруктуруПараметров("тзПарамСписокЗапросовJira",тзПарамСписокЗапросовJira,ПарамСписокЗапросовJira,АдресПарамСписокЗапросовJira);
	
	//тзПарамЗапросJira
	ПарамЗапросJira = Новый Структура;
	тзПарамЗапросJira = ТЗшаблон.СкопироватьКолонки();
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"ЗапросНовыйИзменить","ЗапросНовыйИзменить",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)),"","Создать новый запрос или изменить существующий",Ложь,"ГруппаЗапросНовыйИзменить");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Key","Key",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"","Ключ запроса в Jira",Ложь,"ГруппаЗапросКлюч");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"ID","ID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(25)),"","ID запроса в Jira",Ложь,"ГруппаЗапросПоля1");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"IssueType_Name","Issue type",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Тип запроса","Имя типа запроса в Jira",Истина,"ГруппаЗапросПоля1");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Priority_Name","Priority",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Приоритет запроса","Название приоритета в Jira",Истина,"ГруппаЗапросПоля1");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"EpicLink","Epic",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Ссылка на epic","Ссылка на эпик к которому относится запрос",Ложь,"ГруппаЗапросПоля1");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Parent_Key","Parent key",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"","Ключ родительского запроса в Jira",Ложь,"ГруппаЗапросПоля1");
	
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Status_Name","Status",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Статус запроса","Имя статуса в Jira",Истина,"ГруппаЗапросПоляСтатусСтатус");
	//ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
	//	"предStatus_Name","Status пред.",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Статус запроса","Имя статуса в Jira",Ложь,"");

	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Summary","Summary",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)),"Тема запроса","Тема запроса в Jira",Истина,"ГруппаЗапросПоляОписаниеТема");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Description","Description",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)),"Описание запроса","Описание запроса в Jira",Ложь,"ГруппаЗапросПоляОписаниеОписание");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Components","Components",Новый ОписаниеТипов("СписокЗначений"),"Список компонентов","Список компонентов к которым относится запрос в Jira",Ложь,"ГруппаЗапросПоляОписание");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Labels","Labels",Новый ОписаниеТипов("СписокЗначений"),"Список меток","Список меток запроса в Jira",Ложь,"ГруппаЗапросПоляОписание");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Creator_Name","Creator",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Автор запроса","Имя автора запроса",Ложь,"ГруппаЗапросПользователи");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Reporter_Name","Reporter",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Инициатор запроса","Имя инициатора запроса",Ложь,"ГруппаЗапросПользователи");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Assignee_Name","Assignee",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)),"Исполнитель запроса","Имя исполнителя назначенного для решения запроса",Ложь,"ГруппаЗапросПользователи");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Created","Created",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)),"","Дата и время создания запроса в Jira",Ложь,"ГруппаЗапросДаты");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Updated","Updated",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)),"","Дата и время изменения запроса в Jira",Ложь,"ГруппаЗапросДаты");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"Duedate","Due date",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)),"","Срок исполнения в Jira",Ложь,"ГруппаЗапросДаты");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"OriginalEstimate","Начальн.оценка(ч)",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),"","Первоначальная оценка в часах",Ложь,"ГруппаЗапросОценка");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"RemainingEstimate","Осталось(ч)",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),"","Оставшееся время в часах",Ложь,"ГруппаЗапросОценка");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"TimeSpent","Затрачено(ч)",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),"","Оставшееся время в часах",Ложь,"ГруппаЗапросОценка");
	
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"CommentTotal","CommentTotal",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)),"","Кол-во записей",Ложь,"");
	ДобавитьОписаниеПараметраВСтруктуру(тзПарамЗапросJira,ПарамЗапросJira,
		"WorklogTotal","WorklogTotal",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)),"","Кол-во записей",Ложь,"");
	
	ВосстановитьТекущуюСтруктуруПараметров("тзПарамЗапросJira",тзПарамЗапросJira,ПарамЗапросJira,АдресПарамЗапросJira);
	
	ПредПарамЗапросJira = Новый Структура;
	тзПредПарамЗапросJira = тзПарамЗапросJira.Скопировать();
	тзПредПарамЗапросJira.Удалить(тзПредПарамЗапросJira.Найти("ЗапросНовыйИзменить","Имя"));
	тзПредПарамЗапросJira.Удалить(тзПредПарамЗапросJira.Найти("CommentTotal","Имя"));
	тзПредПарамЗапросJira.Удалить(тзПредПарамЗапросJira.Найти("WorklogTotal","Имя"));
	тзПредПарамЗапросJira.Удалить(тзПредПарамЗапросJira.Найти("ID","Имя"));
	
	тзПредПарамЗапросJira.ЗаполнитьЗначения("","ИмяГруппыНаФорме");
	ВосстановитьТекущуюСтруктуруПараметров("тзПредПарамЗапросJira",тзПредПарамЗапросJira,ПредПарамЗапросJira,АдресПредПарамЗапросJira);
	
	
	//Восстанавливаем таблицу типов и статусов
	СохрПарам = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзJiraТипыИСтатусыЗапросов");
	Если ТипЗнч(СохрПарам) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрПарам ИЗ СохрПарам Цикл
			НовСтр = Объект.JiraТипыИСтатусыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрПарам);
		КонецЦикла;
	КонецЕсли;
	
	//Восстанавливаем таблицу пользователей
	СохрПарам = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзJiraUsers");
	Если ТипЗнч(СохрПарам) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрПарам ИЗ СохрПарам Цикл
			НовСтр = Объект.JiraUsers.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрПарам);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры                    


&НаСервере
Функция СоздатьРеквизитыФормыДляПараметров(Префикс,АдресПарам,МассивДобавляемыхРеквизитов)
	тзПарам = ПолучитьИзВременногоХранилища(АдресПарам);
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		МассивДобавляемыхРеквизитов.Добавить(
			Новый РеквизитФормы(Префикс+"_"+СтрПарам.Имя, СтрПарам.Тип)
		);
		//ЭтаФорма[Префикс].Вставить(СтрПарам.Имя);
		//Если ЗначениеЗаполнено(СтрПарам.Значение) Тогда
		//	ЭтаФорма[Префикс].Вставить(СтрПарам.Имя,СтрПарам.Значение);	
		//КонецЕсли;
	КонецЦикла;
	Возврат тзПарам;
КонецФункции

&НаСервере
Процедура СоздатьЭлементыФормы_ПарамСерверJira(Префикс,тзПарам)
	
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Элемент = Элементы.Добавить(
			Префикс+"_"+СтрПарам.Имя, 
			Тип("ПолеФормы"),
			Элементы.Найти(СтрПарам.ИмяГруппыНаФорме)
		);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Префикс+"_"+СтрПарам.Имя;
		Элемент.Заголовок = СтрПарам.Заголовок;
		Элемент.ПодсказкаВвода = СтрПарам.ПодсказкаВвода;
		Элемент.Подсказка = СтрПарам.Подсказка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Если ЗначениеЗаполнено(СтрПарам.Значение) Тогда
			ЭтаФорма[Префикс+"_"+СтрПарам.Имя] = СтрПарам.Значение; 
		КонецЕсли;
		Элемент.АвтоОтметкаНезаполненного = (СтрПарам.Обязательный=Истина);
		Элемент.ШрифтЗаголовка = Новый Шрифт("Arial",9);
		Элемент.ЦветТекстаЗаголовка = WebЦвета.ТусклоСерый;
		
		Если СтрПарам.Имя = "JiraСерверПротокол" Тогда
			Элемент.Ширина = 5;
			Элемент.РастягиватьПоГоризонтали = Ложь;
		ИначеЕсли СтрПарам.Имя = "JiraСерверHost" Тогда
			Элемент.Ширина = 20;
		КонецЕсли;
		
		
		
		Элемент.УстановитьДействие("ПриИзменении","Подключаемый_"+Префикс+"ПриИзменении");
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы_ПарамПользовательJira(Префикс,тзПарам)
	
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Элемент = Элементы.Добавить(
			Префикс+"_"+СтрПарам.Имя, 
			Тип("ПолеФормы"),
			Элементы.Найти(СтрПарам.ИмяГруппыНаФорме)
		);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Префикс+"_"+СтрПарам.Имя;
		Элемент.Заголовок = СтрПарам.Заголовок;
		Элемент.ПодсказкаВвода = СтрПарам.ПодсказкаВвода;
		Элемент.Подсказка = СтрПарам.Подсказка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Если ЗначениеЗаполнено(СтрПарам.Значение) Тогда
			ЭтаФорма[Префикс+"_"+СтрПарам.Имя] = СтрПарам.Значение; 
		КонецЕсли;
		Элемент.АвтоОтметкаНезаполненного = (СтрПарам.Обязательный=Истина);
		Элемент.ШрифтЗаголовка = Новый Шрифт("Arial",9);
		Элемент.ЦветТекстаЗаголовка = WebЦвета.ТусклоСерый;
		Если Найти(нрег(СтрПарам.Заголовок),"пароль")>0 Тогда
			Элемент.РежимПароля = Истина;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении","Подключаемый_"+Префикс+"ПриИзменении");
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы_ПарамСписокЗапросовJira(Префикс,тзПарам)
	
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Элемент = Элементы.Добавить(
			Префикс+"_"+СтрПарам.Имя, 
			Тип("ПолеФормы"),
			Элементы.Найти(СтрПарам.ИмяГруппыНаФорме)
		);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Префикс+"_"+СтрПарам.Имя;
		Элемент.Заголовок = СтрПарам.Заголовок;
		Элемент.ПодсказкаВвода = СтрПарам.ПодсказкаВвода;
		Элемент.Подсказка = СтрПарам.Подсказка;
		//Заголовок сверху
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Если ЗначениеЗаполнено(СтрПарам.Значение) Тогда
			ЭтаФорма[Префикс+"_"+СтрПарам.Имя] = СтрПарам.Значение; 
		КонецЕсли;
		Элемент.АвтоОтметкаНезаполненного = (СтрПарам.Обязательный=Истина);
		Элемент.ШрифтЗаголовка = Новый Шрифт("Arial",9);
		Элемент.ЦветТекстаЗаголовка = WebЦвета.ТусклоСерый;
		
		Если СтрПарам.Имя = "ШаблонJQL" Тогда
			Элемент.Ширина = 100;
			Элемент.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении","Подключаемый_"+Префикс+"ПриИзменении");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы_ПарамЗапросJira(Префикс,тзПарам)
	
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если ЗначениеЗаполнено(СтрПарам.Значение) Тогда
			ЭтаФорма[Префикс+"_"+СтрПарам.Имя] = СтрПарам.Значение; 
		КонецЕсли;
	
		Если СтрПарам.ИмяГруппыНаФорме = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Добавить(
			Префикс+"_"+СтрПарам.Имя, 
			Тип("ПолеФормы"),
			Элементы.Найти(СтрПарам.ИмяГруппыНаФорме)
		);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Префикс+"_"+СтрПарам.Имя;
		Элемент.Заголовок = СтрПарам.Заголовок;
		Элемент.ПодсказкаВвода = СтрПарам.ПодсказкаВвода;
		Элемент.Подсказка = СтрПарам.Подсказка;
		//Заголовок слева
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.АвтоОтметкаНезаполненного = (СтрПарам.Обязательный=Истина);
		Элемент.ШрифтЗаголовка = Новый Шрифт("Arial",9);
		Элемент.ЦветТекстаЗаголовка = WebЦвета.ТусклоСерый;
		
		Если СтрПарам.Имя = "ЗапросНовыйИзменить" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
			Элемент.ВидПереключателя = ВидПереключателя.Тумблер; 
			Элемент.Шрифт = Новый Шрифт("Arial",11);
			СписВыб = Элемент.СписокВыбора;
			СписВыб.Добавить(0,"Создать запрос");
			СписВыб.Добавить(1,"Изменить запрос");
			
		ИначеЕсли СтрПарам.Имя = "Summary"
			ИЛИ СтрПарам.Имя = "Description" Тогда
			Элемент.Ширина = 68;
			Элемент.РастягиватьПоГоризонтали = Истина;
			Если СтрПарам.Имя = "Description" Тогда
				Элемент.Высота = 4;
				Элемент.МногострочныйРежим = Истина;
				Элемент.РасширенноеРедактирование = Истина;
				Элемент.РастягиватьПоВертикали = Ложь;
			КонецЕсли;
		ИначеЕсли СтрПарам.Имя = "ID" Тогда
			Элемент.Ширина = 15;
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Элемент.ТолькоПросмотр = Истина;
		иначе
			Элемент.Ширина = 15;
			Элемент.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
		Если СтрПарам.Имя = "Priority_Name" Тогда
			Элемент.КнопкаВыпадающегоСписка = Истина;	
		КонецЕсли;
		Если СтрПарам.Имя = "Status_Name"
			ИЛИ СтрПарам.Имя = "IssueType_Name" Тогда
			Элемент.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		Если СтрПарам.Имя = "Components"
			ИЛИ СтрПарам.Имя = "Labels" Тогда
			Элемент.Ширина = 45;
			ЭтаФорма["ПарамЗапросJira_"+СтрПарам.Имя].ТипЗначения = Новый ОписаниеТипов("Строка"); 
		КонецЕсли;
		
		Если СтрПарам.Имя = "Creator_Name" 
			ИЛИ СтрПарам.Имя = "Updated" 
			ИЛИ СтрПарам.Имя = "Created" 
			ИЛИ СтрПарам.Имя = "TimeSpent" 
			Тогда
			Элемент.Доступность = Ложь;
		КонецЕсли;
		
		
		Если СтрПарам.Имя = "Key" 
			ИЛИ СтрПарам.Имя = "Parent_Key" 
			Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении","Подключаемый_"+Префикс+"ПриИзменении");
	КонецЦикла;
	
	ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
КонецПроцедуры


&НаСервере
Процедура СоздатьЭлементыФормыДляПараметров()
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	тзПарамСерверJira = СоздатьРеквизитыФормыДляПараметров("ПарамСерверJira",АдресПарамСерверJira,МассивДобавляемыхРеквизитов);
	тзПарамПользовательJira = СоздатьРеквизитыФормыДляПараметров("ПарамПользовательJira",АдресПарамПользовательJira,МассивДобавляемыхРеквизитов);
	тзПарамСписокЗапросовJira = СоздатьРеквизитыФормыДляПараметров("ПарамСписокЗапросовJira",АдресПарамСписокЗапросовJira,МассивДобавляемыхРеквизитов);
	тзПарамЗапросJira = СоздатьРеквизитыФормыДляПараметров("ПарамЗапросJira",АдресПарамЗапросJira,МассивДобавляемыхРеквизитов);
	//
	тзПредПарамЗапросJira = СоздатьРеквизитыФормыДляПараметров("ПредПарамЗапросJira",АдресПредПарамЗапросJira,МассивДобавляемыхРеквизитов);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );	
	
	СоздатьЭлементыФормы_ПарамСерверJira("ПарамСерверJira",тзПарамСерверJira);
	СоздатьЭлементыФормы_ПарамПользовательJira("ПарамПользовательJira",тзПарамПользовательJira);
	СоздатьЭлементыФормы_ПарамСписокЗапросовJira("ПарамСписокЗапросовJira",тзПарамСписокЗапросовJira);
	СоздатьЭлементыФормы_ПарамЗапросJira("ПарамЗапросJira",тзПарамЗапросJira);
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметры()
	//
	Префикс = "ПарамСерверJira_";
	тзПарамСерверJira = ПолучитьИзВременногоХранилища(АдресПарамСерверJira);
	Для Каждого СтрПарам ИЗ тзПарамСерверJira Цикл
		СтрПарам.Значение = ЭтаФорма[Префикс+СтрПарам.Имя];
	КонецЦикла;
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзПарамСерверJira",тзПарамСерверJira);
	//
	Префикс = "ПарамПользовательJira_";
	тзПарамПользовательJira = ПолучитьИзВременногоХранилища(АдресПарамПользовательJira);
	Для Каждого СтрПарам ИЗ тзПарамПользовательJira Цикл
		СтрПарам.Значение = ЭтаФорма[Префикс+СтрПарам.Имя];
	КонецЦикла;
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзПарамПользовательJira",тзПарамПользовательJira);
	//
	Префикс = "ПарамСписокЗапросовJira_";
	тзПарамСписокЗапросовJira = ПолучитьИзВременногоХранилища(АдресПарамСписокЗапросовJira);
	Для Каждого СтрПарам ИЗ тзПарамСписокЗапросовJira Цикл
		СтрПарам.Значение = ЭтаФорма[Префикс+СтрПарам.Имя];
	КонецЦикла;
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзПарамСписокЗапросовJira",тзПарамСписокЗапросовJira);
	//
	Префикс = "ПарамЗапросJira_";
	тзПарамЗапросJira = ПолучитьИзВременногоХранилища(АдресПарамЗапросJira);
	Для Каждого СтрПарам ИЗ тзПарамЗапросJira Цикл
		СтрПарам.Значение = ЭтаФорма[Префикс+СтрПарам.Имя];
	КонецЦикла;
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзПарамЗапросJira",тзПарамЗапросJira);
	//
	Префикс = "ПредПарамЗапросJira_";
	тзПредПарамЗапросJira = ПолучитьИзВременногоХранилища(АдресПредПарамЗапросJira);
	Для Каждого СтрПарам ИЗ тзПредПарамЗапросJira Цикл
		СтрПарам.Значение = ПредПарамЗапросJira[СтрПарам.Имя];//ЭтаФорма[Префикс+СтрПарам.Имя];
	КонецЦикла;
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзПредПарамЗапросJira",тзПредПарамЗапросJira);
	
	
	//Сохраняем таблицу статусов и типов запросов:
	тзJiraТипыИСтатусыЗапросов = Объект.JiraТипыИСтатусыЗапросов.Выгрузить();
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзJiraТипыИСтатусыЗапросов",тзJiraТипыИСтатусыЗапросов);
	
	//Сохраняем таблицу пользователей
	тзJiraUsers = Объект.JiraUsers.Выгрузить();
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.Jira_1C_Rest_Обмен_1С8_3","тзJiraUsers",тзJiraUsers);
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ЗаполнитьПриоритеты_ПарамЗапросJira()
	СписВыб = Элементы.ПарамЗапросJira_Priority_Name.СписокВыбора;
	СписВыб.Очистить();
	СписВыб.Добавить("High");
	СписВыб.Добавить("Medium");
	СписВыб.Добавить("Low");
	
	Если НЕ ЗначениеЗаполнено(ПарамЗапросJira.Priority_Name) Тогда
		ПарамЗапросJira.Priority_Name = "Medium";
		ЭтаФорма["ПарамЗапросJira_Priority_Name"] = "Medium";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей()
	Спис = Новый СписокЗначений;
	Для Каждого Стр ИЗ Объект.JiraUsers Цикл
		лкИмя = СокрЛП(Стр.Name);
		лкПредставление = СокрЛП(Стр.DisplayName);
		Если ЗначениеЗаполнено(лкИмя) Тогда
			НовЭл = Спис.Добавить(лкИмя);
			Если ЗначениеЗаполнено(лкПредставление) Тогда
				лкПредставление = лкПредставление + " ("+лкИмя+")";
				НовЭл.Представление = лкПредставление;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Если ЗначениеЗаполнено(ПарамПользовательJira.JiraUserName) Тогда
		Если Спис.НайтиПоЗначению(ПарамПользовательJira.JiraUserName) = Неопределено Тогда
			Спис.Вставить(0,ПарамПользовательJira.JiraUserName);
		КонецЕсли;
	КонецЕсли;

	Если Спис.Количество()>0 Тогда
		СтрукЭФ = Новый Структура(
			"ПарамЗапросJira_Creator_Name,ПарамЗапросJira_Reporter_Name,ПарамЗапросJira_Assignee_Name,ЗаписьWorklog_Author_Name,");
		Для Каждого КиЗ ИЗ СтрукЭФ Цикл
			Элементы[КиЗ.Ключ].КнопкаВыпадающегоСписка = Истина;
			СписВыб = Элементы[КиЗ.Ключ].СписокВыбора;
			СписВыб.Очистить();
			Для Каждого Эл ИЗ Спис Цикл
				СписВыб.Добавить(Эл.Значение, Эл.Представление);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыИСтатусыЗапросов_ПарамЗапросJira()
	//Заполним типы запросов и статусы
	СписСтатусов = Элементы.ПарамЗапросJira_Status_Name.СписокВыбора;
	СписСтатусов.Очистить();
	СписТипов = Элементы.ПарамЗапросJira_IssueType_Name.СписокВыбора;
	СписТипов.Очистить();
	Для Каждого Стр ИЗ Объект.JiraТипыИСтатусыЗапросов Цикл
		Если СписТипов.НайтиПоЗначению(Стр.IssueTypeName) = Неопределено Тогда
			СписТипов.Добавить(Стр.IssueTypeName,Стр.IssueTypeName);	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПарамЗапросJira.IssueType_Name) ИЛИ Стр.IssueTypeName = ПарамЗапросJira.IssueType_Name Тогда
			Если СписСтатусов.НайтиПоЗначению(Стр.StatusName) = Неопределено Тогда
				СписСтатусов.Добавить(Стр.StatusName,Стр.StatusName);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Элементы.НадписьЗаполнитьТипыИСтатусы.Видимость = (СписТипов.Количество() = 0);
	Если ЗначениеЗаполнено(ПарамЗапросJira.IssueType_Name) Тогда
		Если СписТипов.НайтиПоЗначению(ПарамЗапросJira.IssueType_Name) = Неопределено Тогда
			ПарамЗапросJira.IssueType_Name = "";
			ЭтаФорма["ПарамЗапросJira_IssueType_Name"] = "";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПарамЗапросJira.Status_Name) Тогда
		Если СписСтатусов.НайтиПоЗначению(ПарамЗапросJira.Status_Name) = Неопределено Тогда
			ПарамЗапросJira.Status_Name = "";
			ЭтаФорма["ПарамЗапросJira_Status_Name"] = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораЗапросаПоСпискуЗапросов()
	
	Если ЗначениеЗаполнено(ПарамСерверJira.JiraCustomField_EpicLink) Тогда
		СписВыб = Элементы.ПарамЗапросJira_EpicLink.СписокВыбора;
		СписВыб.Очистить();
		Для Каждого Стр ИЗ Объект.JiraСписокЗапросов Цикл
			Если НРег(Стр.IssueType_Name) = "epic" Тогда
				Если СписВыб.НайтиПоЗначению(Стр.Кey) = Неопределено Тогда
					СписВыб.Добавить(Стр.Кey,""+Стр.Кey+". "+Стр.Summary);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Элементы.ПарамЗапросJira_EpicLink.КнопкаВыпадающегоСписка = (СписВыб.Количество()>0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредПараметрыЗапросаПоОперацииНовыйИзменить()
	Если ПарамЗапросJira.ЗапросНовыйИзменить <> 1 Тогда
		Для Каждого КиЗ ИЗ ПредПарамЗапросJira Цикл
			ПредПарамЗапросJira[КиЗ.Ключ] = Неопределено;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбновитьПользователяВСпискеПользователейJira(Имя, Представление="")
	ТД = Объект.JiraUsers; 
	МасСтр = ТД.НайтиСтроки(Новый Структура("Name",Имя));
	Если МасСтр.Количество() = 0 Тогда
		НовСтр = ТД.Добавить();
		НовСтр.Name = Имя;
		НовСтр.DisplayName = Представление;
	иначе
		ИскСтр = МасСтр[0];
		Если ЗначениеЗаполнено(Представление) И НЕ ЗначениеЗаполнено(ИскСтр.DisplayName) Тогда
			ИскСтр.DisplayName = Представление; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПредставлениеДатыJira(Знач ДатаВремя1С)
	Если Не ЗначениеЗаполнено(ДатаВремя1С) Тогда
		ДатаВремя1С = Дата(1,1,1);		
	КонецЕсли;
	
	ДатаУнивер = УниверсальноеВремя(ДатаВремя1С);
	СтрДата = Формат( МестноеВремя(ДатаУнивер),"ДФ=yyyy-MM-ddTЧЧ:мм:сс.000"); 
	
	Смещение = СмещениеСтандартногоВремени(, УниверсальноеВремя(ДатаВремя1С)); 
	СтрСмещение = СтрЗаменить( Формат( Смещение/3600,"ЧЦ=4; ЧДЦ=2; ЧВН=; ЧГ=0"),",",""); 
	Если Смещение>0 Тогда
		СтрСмещение = "+"+СтрСмещение;
	КонецЕсли;
	
	Возврат (СтрДата + СтрСмещение); //2017-03-17Т06:00:00.000+0300
КонецФункции

&НаКлиенте
Функция ЧасыВСтрокуДжира(Знач Длительность) 
	Если Не ЗначениеЗаполнено(Длительность) Тогда
		Длительность = 0;
	КонецЕсли;
	
	Если Окр(Длительность,3) = 0 Тогда 
		Возврат "0m";
	КонецЕсли;	
	
	Час = Цел(Длительность);
	Мин = (Длительность - Час) * 60;
	
	Стр = Формат(Час, "ЧН=0; ЧВН=; ЧГ=0") + "h";
	Если Мин > 0 Тогда
		Стр = Стр + " "+ Формат(Мин, "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0")+"m";	
	КонецЕсли;
	Возврат Стр;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗашифроватьBase64Сервер(Строка, КодировкаТекста = "UTF-8") Экспорт
	ДД = ПолучитьДвоичныеДанныеИзСтроки(Строка,КодировкаТекста);
	Стр64 = ПолучитьBase64СтрокуИзДвоичныхДанных(ДД);
	Возврат Стр64; 
	//раньше приходилось делать так:
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	//
	//ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста);
	//ЗаписьТекста.Записать(Строка);
	//ЗаписьТекста.Закрыть();

	//Двоичные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//Результат = Base64Строка(Двоичные);
	//Если Лев(Результат, 4) = "77u/" Тогда
	//	Результат = Сред(Результат, 5);
	//КонецЕсли; 
	//Результат = СтрЗаменить(Результат, Символы.ПС, "");
	//
	//УдалитьФайлы(ИмяВременногоФайла);
	//
	//Возврат Результат;
КонецФункции

&НаСервере
Функция ПроверитьИПодготовитьПараметрыПодключенияJiraСервер(Отказ = Ложь) Экспорт
	Префикс = "ПарамСерверJira_";
	СтрукПарам = ПарамСерверJira;
	тзПарам = ПолучитьИзВременногоХранилища(АдресПарамСерверJira);
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если СтрПарам.Обязательный = Истина 
			И НЕ ЗначениеЗаполнено(СтрукПарам[СтрПарам.Имя]) Тогда
				Текст = СтрШаблон(НСтр("ru = 'Незаполнено: %1'"), СтрПарам.Заголовок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,(Префикс+СтрПарам.Имя), ,Отказ);
		КонецЕсли;
	КонецЦикла;
	СтрукПарам.Вставить("ЗащищенноеСоединение", (Найти(СтрукПарам.JiraСерверПротокол,"https")>0));
	
	Префикс = "ПарамПользовательJira_";
	СтрукПарам = ПарамПользовательJira; 
	тзПарам = ПолучитьИзВременногоХранилища(АдресПарамПользовательJira);
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если СтрПарам.Обязательный = Истина 
			И НЕ ЗначениеЗаполнено(СтрукПарам[СтрПарам.Имя]) Тогда
				Текст = СтрШаблон(НСтр("ru = 'Незаполнено: %1'"), СтрПарам.Заголовок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,(Префикс+СтрПарам.Имя), ,Отказ);
		КонецЕсли;
	КонецЦикла;
	СтрукПарам.Вставить("ЗаголовокАвторизации","");
	Если ЗначениеЗаполнено(СтрукПарам.JiraUserName)
		И ЗначениеЗаполнено(СтрукПарам.JiraUserPass) Тогда
		СтрукПарам.Вставить("ЗаголовокАвторизации", "Basic " + ЗашифроватьBase64Сервер(СтрукПарам.JiraUserName+":"+СтрукПарам.JiraUserPass));
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", ПарамПользовательJira.ЗаголовокАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПарамСерверJira.Вставить("ЗаголовкиHTTP", Заголовки);
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляСпискаЗапросовJiraСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Префикс = "ПарамСписокЗапросовJira_";
	СтрукПарам = ПарамСписокЗапросовJira;
	тзПарам = ПолучитьИзВременногоХранилища(АдресПарамСписокЗапросовJira);
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если СтрПарам.Обязательный = Истина 
			И НЕ ЗначениеЗаполнено(СтрукПарам[СтрПарам.Имя]) Тогда
				Текст = СтрШаблон(НСтр("ru = 'Незаполнено: %1'"), СтрПарам.Заголовок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,(Префикс+СтрПарам.Имя), ,Отказ);
		КонецЕсли;
	КонецЦикла;
	Если ЭтаФорма["ПарамСписокЗапросовJira_updated2"]<ЭтаФорма["ПарамСписокЗапросовJira_updated1"] Тогда
		Текст = НСтр("ru = '""Окончание"" не должно быть меньше ""Начало"": %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамСписокЗапросовJira_updated2", ,Отказ);
	КонецЕсли;
	//project = '[ProjectKey]' & updated>= '[updated1]' & updated <= '[updated2]'
	СтрЗапросJQL = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ПарамСписокЗапросовJira.ШаблонJQL,
		Новый Структура("ProjectKey,updated1,updated2",
			ПарамСерверJira.JiraProjectKey,
			Формат(ПарамСписокЗапросовJira.updated1,"ДФ='гггг/ММ/дд ЧЧ:мм'"),
			Формат(ПарамСписокЗапросовJira.updated2,"ДФ='гггг/ММ/дд ЧЧ:мм'")
		)
	);
	СтрукПарам.Вставить("ЗапросJQL",СтрЗапросJQL);
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляЧтенияЗапросаJiraСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Key"] ) Тогда
		Текст = НСтр("ru = ' Необходимо заполнить ""key"" запроса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Key", ,Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляЗаписиЗапросаJiraСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Префикс = "ПарамЗапросJira_";
	СтрукПарам = ПарамЗапросJira;
	тзПарам = ПолучитьИзВременногоХранилища(АдресПарамЗапросJira);
	Для Каждого СтрПарам ИЗ тзПарам Цикл
		Если СтрПарам.Обязательный = Истина 
			И НЕ ЗначениеЗаполнено(СтрукПарам[СтрПарам.Имя]) Тогда
				Текст = СтрШаблон(НСтр("ru = 'Незаполнено: %1'"), СтрПарам.Заголовок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,(Префикс+СтрПарам.Имя), ,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда
		Если НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Key"] ) Тогда
			Текст = НСтр("ru = ' Необходимо заполнить ""key"" запроса!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Key", ,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПодЗадача = Ложь;
	Если ЗначениеЗаполнено(ПарамЗапросJira.IssueType_Name) Тогда
		МасСтр = Объект.JiraТипыИСтатусыЗапросов.НайтиСтроки(Новый Структура("IssueTypeName",ПарамЗапросJira.IssueType_Name));
		Если МасСтр.Количество()>0 Тогда
			ЭтоПодЗадача = МасСтр[0].IssueTypeIsSubtask;	
		КонецЕсли;
	КонецЕсли;
	Если ЭтоПодЗадача И НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Parent_Key"] ) Тогда
		Текст = НСтр("ru = ' Необходимо указать ключ родительского запроса ""Parent key""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Parent_Key", ,Отказ);
	КонецЕсли;

	ЭтоEpic = ( нрег(ПарамЗапросJira.IssueType_Name) = "epic" И нрег(ПредПарамЗапросJira.IssueType_Name) = "epic");
	Если ЭтоEpic И НЕ ЗначениеЗаполнено(ЭтаФорма["ПарамСерверJira_JiraCustomField_EpicName"]) Тогда 
		Текст = НСтр("ru = 'Необходимо указать поле запроса Jira в котором хранится наименование Epica!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамСерверJira_JiraCustomField_EpicName", ,Отказ);
	КонецЕсли;

	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляПрочитатьЗапросWorkLogСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Key"] ) Тогда
		Текст = НСтр("ru = 'Необходимо прочитать запрос из Jira. Для чтения записей о работах необходим ""Key"" запроса!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Key", ,Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляПрочитатьCommentsСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Key"] ) Тогда
		Текст = НСтр("ru = 'Необходимо прочитать запрос из Jira. Для чтения комменатриев к запросу необходим ""Key"" запроса!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Key", ,Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Функция ПроверитьИПодготовитьПараметрыДляУдалитьЗаписьWorkLogСервер(Отказ = Ложь) Экспорт
	
	Если ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() = Ложь Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( ЭтаФорма["ПарамЗапросJira_Key"] ) Тогда
		Текст = НСтр("ru = 'Необходимо прочитать запрос из Jira. Для удаления записей о работах необходим ""Key"" запроса!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,"ПарамЗапросJira_Key", ,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( ЗаписьWorklog_ID ) Тогда
		Текст = НСтр("ru = 'Необходимо указать ID записи для удаления!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,, ,Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции 

&НаСервере
Процедура ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер()
	
	Элементы.СоздатьОбновитьЗапрос.Заголовок = ?(ПарамЗапросJira.ЗапросНовыйИзменить <> 1,"Создать в Jira","Записать в Jira");
	Элементы.СоздатьОбновитьЗапрос.Картинка = ?(ПарамЗапросJira.ЗапросНовыйИзменить <> 1,БиблиотекаКартинок.СоздатьЭлементСписка,БиблиотекаКартинок.ЗакончитьРедактирование);
	
	Если ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда 
		Элементы.ГруппаЗапросКлючИСсылка.Видимость = Истина;
		СсылкаBrowse = ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+"/browse/"+ПарамЗапросJira.key;
		СсылкаRest = ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.key; 
		
		Элементы.НадписьЗапросJiraПерейти.Заголовок = СсылкаBrowse;
		Элементы.НадписьЗапросJiraПерейти.Подсказка = "Открыть запрос Jira в браузере";
		Элементы.НадписьЗапросJiraJSON.Заголовок = "JSON";
		Элементы.НадписьЗапросJiraJSON.РасширеннаяПодсказка.Заголовок = "Открыть JSON по ссылке:
		|"+СсылкаRest; 
	иначе
		Элементы.ГруппаЗапросКлючИСсылка.Видимость = Ложь;
	КонецЕсли;
	
	ОперацияИзменить = (ПарамЗапросJira.ЗапросНовыйИзменить = 1 И ЗначениеЗаполнено(ПарамЗапросJira.key)); 
	ВидимостьСсылок = ОперацияИзменить;
	Элементы.НадписьЗапросJiraПерейти.Видимость = ВидимостьСсылок;
	Элементы.НадписьЗапросJiraJSON.Видимость = ВидимостьСсылок;
	Элементы.ПрочитатьЗапрос.Видимость = ВидимостьСсылок;
	Элементы.СтраницаЗапросЗаписиОРаботах.Видимость = ВидимостьСсылок; 
	Элементы.СтраницаЗапросКоментарии.Видимость = ВидимостьСсылок; 
	Элементы["ПарамЗапросJira_Created"].Видимость = ВидимостьСсылок; 
	Элементы["ПарамЗапросJira_Updated"].Видимость = ВидимостьСсылок; 
	Элементы["ПарамЗапросJira_TimeSpent"].Видимость = ВидимостьСсылок; 
	Элементы["ПарамЗапросJira_Creator_Name"].Видимость = ВидимостьСсылок;

	//Элементы["ПарамЗапросJira_Created"].Доступность = ВидимостьСсылок;
	//Элементы["ПарамЗапросJira_Updated"].Доступность = ВидимостьСсылок;
	
	ЭтоEpic = ( нрег(ПарамЗапросJira.IssueType_Name) = "epic" И нрег(ПредПарамЗапросJira.IssueType_Name) = "epic");
	Элементы["ПарамЗапросJira_EpicLink"].Видимость = ( ЗначениеЗаполнено(ПарамСерверJira.JiraCustomField_EpicLink) И НЕ ЭтоEpic); 
	
	ЭтоПодЗадача = Ложь;
	Если ЗначениеЗаполнено(ПарамЗапросJira.IssueType_Name) Тогда
		МасСтр = Объект.JiraТипыИСтатусыЗапросов.НайтиСтроки(Новый Структура("IssueTypeName",ПарамЗапросJira.IssueType_Name));
		Если МасСтр.Количество()>0 Тогда
			ЭтоПодЗадача = МасСтр[0].IssueTypeIsSubtask;	
		КонецЕсли;
	КонецЕсли;
	Элементы["ПарамЗапросJira_Parent_Key"].Видимость = ЭтоПодЗадача;
	//Из под задачи нельзя сделать "не подзадачу" через REST :(
	//Элементы["ПарамЗапросJira_Parent_Key"].Доступность = НЕ (ЭтоПодЗадача И ПарамЗапросJira.ЗапросНовыйИзменить = 1);
	//Элементы["ПарамЗапросJira_IssueType_Name"].Доступность = НЕ (ЭтоПодЗадача И ПарамЗапросJira.ЗапросНовыйИзменить = 1);
	
	Элементы.СтраницаЗапросЗаписиОРаботах.Заголовок = "Записи о работах";
	Элементы.СтраницаЗапросЗаписиОРаботах.ЦветТекстаЗаголовка  = WebЦвета.Серый;
	Если ЗначениеЗаполнено(ПарамЗапросJira.WorklogTotal) Тогда
		Элементы.СтраницаЗапросЗаписиОРаботах.Заголовок = "Записи о работах ("+Формат(ПарамЗапросJira.WorklogTotal,"ЧГ=0")+")";
		Элементы.СтраницаЗапросЗаписиОРаботах.ЦветТекстаЗаголовка = WebЦвета.Черный;
	КонецЕсли;
	Элементы.СтраницаЗапросКоментарии.Заголовок = "Комментарии";
	Элементы.СтраницаЗапросКоментарии.ЦветТекстаЗаголовка = WebЦвета.Серый;
	Если ЗначениеЗаполнено(ПарамЗапросJira.CommentTotal) Тогда 
		Элементы.СтраницаЗапросКоментарии.Заголовок = "Комментарии ("+Формат(ПарамЗапросJira.CommentTotal,"ЧГ=0")+")";
		Элементы.СтраницаЗапросКоментарии.ЦветТекстаЗаголовка = WebЦвета.Черный;
	КонецЕсли;
	
	ВидимостьИзменитьСтатус = Ложь;
	лкШрифт = Новый Шрифт("Arial",10,Ложь);
	лкЦветТекстаЗаголовок = WebЦвета.ТусклоСерый;
	лкЦветТекстаЗаголовокИзм = WebЦвета.ТемноБордовый;
	лкЦветФона = Новый Цвет();
	лкЦветФонаИзм = WebЦвета.СветлоЖелтый;
	Для Каждого КиЗ ИЗ ПредПарамЗапросJira Цикл
		Элемент = Элементы.Найти("ПарамЗапросJira_"+КиЗ.Ключ);
		Если НЕ Элемент = Неопределено Тогда
			Если ОперацияИзменить И НЕ Строка(ПредПарамЗапросJira[КиЗ.Ключ]) = Строка(ПарамЗапросJira[КиЗ.Ключ]) Тогда
				Элемент.ЦветФона = лкЦветФонаИзм;
				Элемент.ЦветТекстаЗаголовка = лкЦветТекстаЗаголовокИзм;
			иначе
				Элемент.ЦветФона = лкЦветФона;
				Элемент.ЦветТекстаЗаголовка = лкЦветТекстаЗаголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОперацияИзменить И ЗначениеЗаполнено(ПредПарамЗапросJira.Status_Name) И НЕ (ПредПарамЗапросJira.Status_Name = ПарамЗапросJira.Status_Name) Тогда
		лкШрифт = Новый Шрифт("Arial",10,Истина);
		ВидимостьИзменитьСтатус = Истина;
		Элементы.НадписьИзменениеСтатусаЗапроса.Заголовок = СтрШаблон(
			"При записи статус изменится: ""%1"" -> ""%2""",
			ПредПарамЗапросJira.Status_Name,
			ПарамЗапросJira.Status_Name
		);
	КонецЕсли;
	Элементы.НадписьИзменениеСтатусаЗапроса.Видимость = ВидимостьИзменитьСтатус;
	Элементы["ПарамЗапросJira_Status_Name"].Шрифт = лкШрифт;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиИДоступность_ЗаписьWorkLogJira_Сервер(ДобавитьИзменить = Неопределено)
	
	Если ДобавитьИзменить=1 Тогда //Изменить
		СтрИд = Элементы.JiraЗапросWorkLog.ТекущаяСтрока;
		ТекДанные = Объект.JiraЗапросWorkLog.НайтиПоИдентификатору(СтрИд);
		Если ТекДанные = Неопределено Тогда
			ДобавитьИзменить = 0;
		КонецЕсли;
	КонецЕсли;	
	
	ЗаписьWorklog_ДобавитьИзменить = ДобавитьИзменить;
	
	Если ДобавитьИзменить = Неопределено Тогда
		Элементы.ГруппаЗаписьWorkLog.Видимость = Ложь;
		Элементы.JiraЗапросWorkLogНоваяЗаписьЗапросWorkLog.Пометка = Ложь;
		Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Пометка = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаЗаписьWorkLog.Видимость = Истина;
		Элементы.JiraЗапросWorkLogНоваяЗаписьЗапросWorkLog.Пометка = (ДобавитьИзменить=0);
		Элементы.JiraЗапросWorkLogИзменитьЗаписьЗапросWorkLog.Пометка = (ДобавитьИзменить=1);
		
		Элементы.ЗаписьWorklog_ID.Видимость = (ДобавитьИзменить=1); 
	КонецЕсли;
	
	Если ДобавитьИзменить=0 Тогда
		ЗаписьWorklog_Started = ТекущаяДата();
		ЗаписьWorklog_Author_Name = ПарамПользовательJira.JiraUserName;	
		ЗаписьWorklog_ID = ""; 
		ЗаписьWorklog_Сomment = ""; 
		ЗаписьWorklog_TimeSpent = 0; 
		
		ТекущийЭлемент = Элементы.ЗаписьWorklog_TimeSpent;
	иначе
		ЗаписьWorklog_Started = ТекДанные.Started;
		ЗаписьWorklog_ID = ТекДанные.ID; 
		ЗаписьWorklog_Сomment = ТекДанные.Сomment; 
		ЗаписьWorklog_TimeSpent = ТекДанные.TimeSpent; 
		ЗаписьWorklog_Author_Name = ТекДанные.Author_Name; 
	КонецЕсли;
	
	Элементы.СоздатьОбновитьЗаписьWorkLog.Заголовок = ?(ДобавитьИзменить = 0,"Сохранить запись","Записать изменения");
	Элементы.СоздатьОбновитьЗаписьWorkLog.Картинка = ?(ДобавитьИзменить = 0,БиблиотекаКартинок.ЗакончитьРедактирование,БиблиотекаКартинок.ЗакончитьРедактирование);
	
	Элементы.ГруппаЗаписьWorkLog.Заголовок = ?(ДобавитьИзменить = 0,"Добавить новую запись о работе в Jira","Обновить запись о работе в Jira");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТипыИСтатусыЗапросовОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	//rest/api/2/project/{projectIdOrKey}/statuses
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI +"/project/"+ПарамСерверJira.JiraProjectKey+"/statuses"; 
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	ПоказатьОповещениеПользователя("Получаем типы и статусы запросов из Jira",,ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+СсылкаНаРесурс);
	
	ОписаниеОшибки = "";
	Попытка
		HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТД = Объект.JiraТипыИСтатусыЗапросов; 
		Если ТД.Количество()>0 Тогда
			ТД.Очистить();
		КонецЕсли;
		Для Каждого type ИЗ ПолученныеДанные Цикл
			IssueTypeIsSubtask = type.Получить("subtask"); 
			IssueTypeName = type.Получить("name");
			IssueTypeID = type.Получить("id");
			
			statuses = type.Получить("statuses");
			Для Каждого status ИЗ statuses Цикл
				НовСтр = ТД.Добавить();
				НовСтр.IssueTypeName = IssueTypeName;
				НовСтр.IssueTypeID = IssueTypeID;
				НовСтр.IssueTypeIsSubtask = IssueTypeIsSubtask;
				
				НовСтр.StatusName = status.Получить("name"); 
				НовСтр.StatusID  = status.Получить("id");
				НовСтр.StatusDescription  = status.Получить("description");
				
				statusCategory = status.Получить("statusCategory");
				НовСтр.StatusCategoryName  = statusCategory.Получить("name");
				НовСтр.StatusCategoryID  = statusCategory.Получить("id");
			КонецЦикла;
		КонецЦикла;
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
			СтрШаблон("Заполнено строк:%1 в таблице типов и статусов запросов",ТД.Количество()));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗапросовОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	
	SSL = Неопределено;
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	КонецЕсли;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ВсегоЭлементов = ПарамСписокЗапросовJira.ВсегоВыбрать;
	maxResults = ПарамСписокЗапросовJira.РазмерПорции;
	startAt = 0;

	Данные = Новый Соответствие();
	
	Данные.Вставить("jql",ПарамСписокЗапросовJira.ЗапросJQL);
	Данные.Вставить("fields", Новый Массив());
	
	fields = Данные.Получить("fields");
	fields.Добавить("id");
	fields.Добавить("key");
	fields.Добавить("self");
	fields.Добавить("updated");
	fields.Добавить("created");
	fields.Добавить("status");
	fields.Добавить("creator");
	fields.Добавить("reporter");
	fields.Добавить("issuetype");
	fields.Добавить("description");
	fields.Добавить("summary");
	fields.Добавить("assignee");
	//
	fields.Добавить("comment");
	fields.Добавить("worklog");
	Если ЗначениеЗаполнено(ПарамСерверJira.JiraCustomField_EpicLink) Тогда
		fields.Добавить(ПарамСерверJira.JiraCustomField_EpicLink);	
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, SSL);
	
	//http://localhost:8080/rest/api/2/search
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI +"/search";
	
	ПоказатьОповещениеПользователя("Выполняем запрос к Jira",,ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+СсылкаНаРесурс+"
		|JQL: "+ПарамСписокЗапросовJira.ЗапросJQL);
	
	ПрефиксBrowseLink = ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+"/browse/"; 
	
	Пока startAt<ВсегоЭлементов Цикл
		Данные.Вставить("startAt",startAt);
		Данные.Вставить("maxResults",maxResults);
		
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
		СтрJSON = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
		
		ОписаниеОшибки = "";
		Попытка
			//HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос); //POST запрос
			СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если HTTPОтвет.КодСостояния > 299 Тогда
				ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
				//
				Текст = Новый ТекстовыйДокумент;
				Текст.УстановитьТекст(СтрокаОтвет);
				Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
		КонецПопытки;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		//Текст = Новый ТекстовыйДокумент;
		//Текст.УстановитьТекст(СтрокаОтвет);
		//Текст.Показать("Полученые данные. Код состояния: "+HTTPОтвет.КодСостояния);
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
			Прервать;
		КонецЕсли;
		
		Если startAt = 0 Тогда
			ТД = Объект.JiraСписокЗапросов; 
			Если ТД.Количество()>0 Тогда
				ТД.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ВсегоЭлементов = Мин(ПарамСписокЗапросовJira.ВсегоВыбрать, ПолученныеДанные.Получить("total"));
		текПолучено = 0;
		issues = ПолученныеДанные.Получить("issues"); 
		Если НЕ issues = Неопределено Тогда 
			текПолучено = issues.Количество(); 
			Для Каждого issue ИЗ issues Цикл
				fields = issue.Получить("fields"); 
				Если НЕ fields = Неопределено Тогда
					НовСтр = ТД.Добавить();
					
					НовСтр.Кey = issue["key"]; 
					НовСтр.ID = issue["id"]; 
					НовСтр.Self = issue["self"]; 			
					
					НовСтр.Summary = fields["summary"]; 			 
					НовСтр.Description = fields["description"];
					
					НовСтр.Updated = ПрочитатьДатуJSON(fields["updated"],ФорматДатыJSON.ISO); 
					НовСтр.Created = ПрочитатьДатуJSON(fields["created"],ФорматДатыJSON.ISO); 
					НовСтр.BrowseLink = ПрефиксBrowseLink + issue["key"];
					
					Если НЕ fields["status"] = Неопределено Тогда 
						НовСтр.Status_Name = fields["status"]["name"]; 
					КонецЕсли;
					Если НЕ fields["issuetype"] = Неопределено Тогда 
						НовСтр.IssueType_Name = fields["issuetype"]["name"];
					КонецЕсли;
					Если НЕ fields["creator"] = Неопределено Тогда 
						НовСтр.Creator_Name = fields["creator"]["name"];
						ДобавитьОбновитьПользователяВСпискеПользователейJira(fields["creator"]["name"],fields["creator"]["displayName"]);
					КонецЕсли;
					Если НЕ fields["reporter"] = Неопределено Тогда 
						НовСтр.Reporter_Name = fields["reporter"]["name"];
						ДобавитьОбновитьПользователяВСпискеПользователейJira(fields["reporter"]["name"],fields["reporter"]["displayName"]);
					КонецЕсли;
					Если НЕ fields["assignee"] = Неопределено Тогда 
						НовСтр.Assignee_Name = fields["assignee"]["name"];
						ДобавитьОбновитьПользователяВСпискеПользователейJira(fields["assignee"]["name"],fields["assignee"]["displayName"]);
					КонецЕсли;
					
					worklog = fields.Получить("worklog");
					Если НЕ worklog = Неопределено Тогда
						НовСтр.Worklog_Total = worklog.Получить("total");
					КонецЕсли;
					
					comment = fields.Получить("comment");
					Если НЕ comment = Неопределено Тогда
						НовСтр.Comment_Total = comment.Получить("total");
					КонецЕсли;
					
				КонецЕсли;
				
				//Парам = Новый Структура("Проект, key, ДатаИзм, id, self, updated, KeyProject",
				//СтрПроект.Проект, 
				//issue.key,
				//ТекДата,
				//issue.id,
				//issue.self,
				//updated,
				//СтрПроект.JiraKeyProject
				//);
				//рсОчередь.Добавить(Парам,ТекДата);
				
			КонецЦикла;
		КонецЕсли;
		
		startAt = startAt + текПолучено;
				
		HTTPЗапрос = Неопределено;
		HTTPОтвет = Неопределено;
	КонецЦикла;
	Если НЕ Отказ Тогда
		ТД.Сортировать("Updated УБЫВ");
		
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
			СтрШаблон("Получено запросов:%1 из Jira",ВсегоЭлементов));
			
		ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
		ЗаполнитьТипыИСтатусыЗапросов_ПарамЗапросJira();
		ЗаполнитьСпискиВыбораЗапросаПоСпискуЗапросов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗапросОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.key+"?&expand=renderedFields";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	ПоказатьОповещениеПользователя("Читаем запрос из Jira",,ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+СсылкаНаРесурс);
	
	ОписаниеОшибки = "";
	Попытка
		HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Префикс = "ПарамЗапросJira_";
		СоотвРекв = Новый Структура("key,id","Key","ID");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = ПолученныеДанные[КиЗ.Ключ];
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		fields = ПолученныеДанные.Получить("fields");
		
		fields_status = fields.Получить("status");
		СоотвРекв = Новый Структура("name","Status_Name");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_status.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;

		fields_issuetype = fields.Получить("issuetype");
		СоотвРекв = Новый Структура("name","IssueType_Name");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_issuetype.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		fields_parent = fields.Получить("parent");
		Если ЗначениеЗаполнено(fields_parent) Тогда
		СоотвРекв = Новый Структура("key","Parent_Key");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_parent.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		КонецЕсли;
		
		
		
		fields_priority = fields.Получить("priority");
		СоотвРекв = Новый Структура("name","Priority_Name");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_priority.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		fields_creator = fields.Получить("creator");
		ДобавитьОбновитьПользователяВСпискеПользователейJira(fields_creator["name"],fields_creator["displayName"]);
		
		СоотвРекв = Новый Структура("name","Creator_Name");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_creator.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		fields_reporter = fields.Получить("reporter");
		Если ЗначениеЗаполнено(fields_reporter) Тогда
			ДобавитьОбновитьПользователяВСпискеПользователейJira(fields_reporter["name"],fields_reporter["displayName"]);
			
			СоотвРекв = Новый Структура("name","Reporter_Name");
			Для Каждого КиЗ ИЗ СоотвРекв Цикл
				зн = fields_reporter.Получить(КиЗ.Ключ);
				Если НЕ ЗначениеЗаполнено(зн) Тогда
					зн = "";
				КонецЕсли;	
				ЭтаФорма[Префикс+КиЗ.Значение] = зн;
				ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
			КонецЦикла;
		Иначе
			ЭтаФорма[Префикс+"Reporter_Name"] = "";
			ПарамЗапросJira.Вставить("Reporter_Name", "");
		КонецЕсли;
		
		fields_assignee = fields.Получить("assignee");
		Если ЗначениеЗаполнено(fields_assignee) Тогда
			ДобавитьОбновитьПользователяВСпискеПользователейJira(fields_assignee["name"],fields_assignee["displayName"]);
			
			СоотвРекв = Новый Структура("name","Assignee_Name");
			Для Каждого КиЗ ИЗ СоотвРекв Цикл
				зн = fields_assignee.Получить(КиЗ.Ключ);
				Если НЕ ЗначениеЗаполнено(зн) Тогда
					зн = "";
				КонецЕсли;	
				ЭтаФорма[Префикс+КиЗ.Значение] = зн;
				ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
			КонецЦикла;
		иначе
			ЭтаФорма[Префикс+"Assignee_Name"] = "";
			ПарамЗапросJira.Вставить("Assignee_Name", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПарамСерверJira.JiraCustomField_EpicLink) Тогда
			СоотвРекв = Новый Структура(ПарамСерверJira.JiraCustomField_EpicLink,"EpicLink");
			Для Каждого КиЗ ИЗ СоотвРекв Цикл
				зн = fields[КиЗ.Ключ];
				ЭтаФорма[Префикс+КиЗ.Значение] = зн;
				ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
			КонецЦикла;
		иначе
			ЭтаФорма[Префикс+"EpicLink"] = "";
			ПарамЗапросJira.Вставить("EpicLink", "");
		КонецЕсли;
		
		СоотвРекв = Новый Структура("updated,created,duedate","Updated","Created","Duedate");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields.Получить(КиЗ.Ключ);
			Если ЗначениеЗаполнено(зн) Тогда
				зн = ПрочитатьДатуJSON(зн,ФорматДатыJSON.ISO)	
			иначе
				зн = Дата(1,1,1);
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		СоотвРекв = Новый Структура("summary,description","Summary","Description");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields.Получить(КиЗ.Ключ);
			Если НЕ ЗначениеЗаполнено(зн) Тогда
				зн = "";
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		//"Components","Components",Новый ОписаниеТипов("СписокЗначений"),"Список компонентов","Список компонентов к которым относится запрос в Jira",Ложь,"ГруппаЗапросПоля");
		//"Labels","Labels",Новый ОписаниеТипов("СписокЗначений"),"Список меток","Список меток запроса в Jira",Ложь,"ГруппаЗапросПоля");
		
		ЭтаФорма[Префикс+"Components"] = Новый СписокЗначений;
		ПарамЗапросJira.Вставить("Components",Новый СписокЗначений);
		fields_components = fields.Получить("components"); 
		Если fields_components.Количество() > 0 Тогда 
			Для Каждого Эл ИЗ fields_components Цикл
				ЭтаФорма[Префикс+"Components"].Добавить(Эл.Получить("name"));
				ПарамЗапросJira["Components"].Добавить(Эл.Получить("name"));
			КонецЦикла;
		КонецЕсли;	
		
		ЭтаФорма[Префикс+"Labels"] = Новый СписокЗначений;
		ПарамЗапросJira.Вставить("Labels",Новый СписокЗначений);
		fields_labels = fields.Получить("labels"); 
		Если fields_labels.Количество() > 0 Тогда 
			Для Каждого Эл ИЗ fields_labels Цикл
				ЭтаФорма[Префикс+"Labels"].Добавить(Эл);
				ПарамЗапросJira["Labels"].Добавить(Эл);
			КонецЦикла;
		КонецЕсли;	

		fields_timetracking = fields.Получить("timetracking");
		СоотвРекв = Новый Структура("originalEstimateSeconds,remainingEstimateSeconds,timeSpentSeconds",
		"OriginalEstimate","RemainingEstimate","TimeSpent");
		Для Каждого КиЗ ИЗ СоотвРекв Цикл
			зн = fields_timetracking.Получить(КиЗ.Ключ);
			Если ЗначениеЗаполнено(зн) Тогда
				зн = Окр(зн/3600,2);
			иначе	
				зн = 0;
			КонецЕсли;	
			ЭтаФорма[Префикс+КиЗ.Значение] = зн;
			ПарамЗапросJira.Вставить(КиЗ.Значение,зн);
		КонецЦикла;
		
		fields_worklog = fields.Получить("worklog");
		Если ЗначениеЗаполнено(fields_worklog) Тогда
			зн = fields_worklog.Получить("total"); 
			ЭтаФорма[Префикс+"WorklogTotal"] = зн;
			ПарамЗапросJira.Вставить("WorklogTotal",зн);
			
			//Прочитаем все записи worklog из jira
			ПрочитатьЗапросWorkLogОбработка();
		КонецЕсли;
		
		fields_comment = fields.Получить("comment");
		Если ЗначениеЗаполнено(fields_comment) Тогда
			зн = fields_comment.Получить("total"); 
			ЭтаФорма[Префикс+"CommentTotal"] = зн;
			ПарамЗапросJira.Вставить("CommentTotal",зн);
			
			//Прочитаем все комментарии к запросу
			ПрочитатьЗапросCommentsОбработка();
		КонецЕсли;
		
		Для Каждого КиЗ ИЗ ПредПарамЗапросJira Цикл
			ПредПарамЗапросJira[КиЗ.Ключ] = ПарамЗапросJira[КиЗ.Ключ];
		КонецЦикла;
		
		ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
		ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
		
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
		"Реквизиты запроса обновлены по данным из Jira");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеЗапросаДляИзмененияВJira(fields,КлючJira,КлючПодчиненныйJira="",ИмяСтрукПарам="ПарамЗапросJira",КлючПарам,ДобавитьБезПроверки=Ложь)
	ДобавитьПоле = Истина;
	Если ДобавитьБезПроверки = Ложь 
		И НЕ ПарамЗапросJira.ЗапросНовыйИзменить = 0 
		И ЭтаФорма["Пред"+ИмяСтрукПарам].Свойство(КлючПарам)
		И ЭтаФорма["Пред"+ИмяСтрукПарам][КлючПарам] = ЭтаФорма[ИмяСтрукПарам][КлючПарам] Тогда
		ДобавитьПоле = Ложь;
	КонецЕсли;
	
	Если ДобавитьПоле = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючПодчиненныйJira) Тогда
		fields.Вставить(КлючJira,Новый Структура(КлючПодчиненныйJira)); 
		лкfields = fields[КлючJira]; 
		лкКлючJira = КлючПодчиненныйJira;
	иначе
		лкfields = fields;
		лкКлючJira = КлючJira;
	КонецЕсли;
	
	лкfields.Вставить(лкКлючJira, ЭтаФорма[ИмяСтрукПарам][КлючПарам]);	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьЗапросОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Данные = Новый Структура("fields",Новый Структура);
	
	fields = Данные.fields;
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"project","key","ПарамСерверJira","JiraProjectKey",Истина);//fields.Вставить("project", Новый Структура("key", ПарамСерверJira.JiraProjectKey));
	
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"summary",,"ПарамЗапросJira","Summary");//fields.Вставить("summary", ПарамЗапросJira.Summary);
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"description",,"ПарамЗапросJira","Description");//fields.Вставить("description", ПарамЗапросJira.Description);
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"priority","name","ПарамЗапросJira","Priority_Name");//fields.Вставить("priority", Новый Структура("name", ПарамЗапросJira.Priority_Name));
	
	ЭтоПодЗадача = Ложь;
	ПредЭтоПодЗадача = Ложь;
	issuetype_id = "";
	Если ЗначениеЗаполнено(ПарамЗапросJira.IssueType_Name) Тогда
		МасСтр = Объект.JiraТипыИСтатусыЗапросов.НайтиСтроки(Новый Структура("IssueTypeName",ПарамЗапросJira.IssueType_Name));
		Если МасСтр.Количество()>0 Тогда
			ЭтоПодЗадача = МасСтр[0].IssueTypeIsSubtask;	
			ПарамЗапросJira.Вставить("issuetype_id", МасСтр[0].IssueTypeID);
			ПредПарамЗапросJira.Вставить("issuetype_id");
		КонецЕсли;
		МасСтр = Объект.JiraТипыИСтатусыЗапросов.НайтиСтроки(Новый Структура("IssueTypeName",ПредПарамЗапросJira.IssueType_Name));
		Если МасСтр.Количество()>0 Тогда
			ПредЭтоПодЗадача = МасСтр[0].IssueTypeIsSubtask;	
			ПредПарамЗапросJira.Вставить("issuetype_id", МасСтр[0].IssueTypeID);
		КонецЕсли;	
	КонецЕсли;
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"issuetype","id","ПарамЗапросJira","issuetype_id");//fields.Вставить("issuetype", Новый Структура("id", issuetype_id));
	//
	Если Строка(ПарамЗапросJira.Components) <> Строка(ПредПарамЗапросJira.Components) Тогда
		fields.Вставить("components", Новый Массив);
		components = fields.components; 
		Если ТипЗнч(ПарамЗапросJira.Components) = Тип("СписокЗначений") Тогда
			Для Каждого Эл ИЗ ПарамЗапросJira.Components Цикл
				components.Добавить(Новый Структура("name",Эл.Значение)); 		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Строка(ПарамЗапросJira.Labels) <> Строка(ПредПарамЗапросJira.Labels) Тогда
		fields.Вставить("labels", Новый Массив);
		Если ТипЗнч(ПарамЗапросJira.Labels) = Тип("СписокЗначений") Тогда
			labels = fields.labels;
			Для Каждого Эл ИЗ ПарамЗапросJira.Labels Цикл
				labels.Добавить(Эл.Значение); 		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	
	//fields.Вставить("duedate");
	//Если ЗначениеЗаполнено(ПарамЗапросJira.Duedate) Тогда
	//	fields.Вставить("duedate", Формат(ПарамЗапросJira.Duedate,"ДФ=гггг-ММ-дд"));
	//КонецЕсли;
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"duedate",,"ПарамЗапросJira","Duedate");
	Если fields.Свойство("duedate") Тогда
		fields.Вставить("duedate", Формат(ПарамЗапросJira.Duedate,"ДФ=гггг-ММ-дд"));
	КонецЕсли;
	
	//fields.Вставить("assignee");
	//Если ЗначениеЗаполнено(ПарамЗапросJira.Assignee_Name) Тогда
	//	fields.Вставить("assignee",Новый Структура("name",ПарамЗапросJira.Assignee_Name));	
	//КонецЕсли;	
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"assignee","name","ПарамЗапросJira","Assignee_Name");
	
	//fields.Вставить("reporter");
	//Если ЗначениеЗаполнено(ПарамЗапросJira.Reporter_Name) Тогда
	//	fields.Вставить("reporter",Новый Структура("name",ПарамЗапросJira.Reporter_Name));	
	//КонецЕсли;	
	ДобавитьПолеЗапросаДляИзмененияВJira(fields,"reporter","name","ПарамЗапросJira","Reporter_Name");
	
	ЭтоEpic = ( нрег(ПарамЗапросJira.IssueType_Name) = "epic" И нрег(ПредПарамЗапросJira.IssueType_Name) = "epic");
	Если ЭтоEpic Тогда
		//fields.Вставить(ПарамСерверJira.JiraCustomField_EpicName, ПарамЗапросJira.Summary);
		ДобавитьПолеЗапросаДляИзмененияВJira(fields,ПарамСерверJira.JiraCustomField_EpicName,,"ПарамЗапросJira","Summary");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПарамСерверJira.JiraCustomField_EpicLink) Тогда
		//fields.Вставить(ПарамСерверJira.JiraCustomField_EpicLink);
		//Если ЗначениеЗаполнено(ПарамЗапросJira.EpicLink) Тогда
		//	fields.Вставить(ПарамСерверJira.JiraCustomField_EpicLink, ПарамЗапросJira.EpicLink);
		//КонецЕсли;
		ДобавитьПолеЗапросаДляИзмененияВJira(fields,ПарамСерверJira.JiraCustomField_EpicLink,,"ПарамЗапросJira","EpicLink");
	КонецЕсли;
	
	Если ЭтоПодЗадача И ЗначениеЗаполнено(ПарамЗапросJira.Parent_Key) Тогда
		fields.Вставить("parent", Новый Структура("key", ПарамЗапросJira.Parent_Key));	
	КонецЕсли;
	
	Если ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда //Обновить
		//Данные.Вставить("updated",ПредставлениеДатыJira(ПарамЗапросJira.Updated));
		ДобавитьПолеЗапросаДляИзмененияВJira(fields,"updated",,"ПарамЗапросJira","Updated");
		Если fields.Свойство("updated") Тогда
			fields.Вставить("updated", ПредставлениеДатыJira(ПарамЗапросJira.Updated));
		КонецЕсли;
		//Данные.Вставить("created",ПредставлениеДатыJira(ПарамЗапросJira.Created));
		ДобавитьПолеЗапросаДляИзмененияВJira(fields,"created",,"ПарамЗапросJira","Updated");
		Если fields.Свойство("created") Тогда
			fields.Вставить("created", ПредставлениеДатыJira(ПарамЗапросJira.Created));
		КонецЕсли;
	КонецЕсли;
	
	
	timetracking = Новый Структура;
	ДобавитьПолеЗапросаДляИзмененияВJira(timetracking,"originalEstimate",,"ПарамЗапросJira","OriginalEstimate");//fields.timetracking.Вставить("originalEstimate", ЧасыВСтрокуДжира(ПарамЗапросJira.OriginalEstimate) );
	Если timetracking.Свойство("originalEstimate") Тогда
		timetracking.Вставить("originalEstimate", ЧасыВСтрокуДжира(ПарамЗапросJira.OriginalEstimate));
	КонецЕсли;
	ДобавитьПолеЗапросаДляИзмененияВJira(timetracking,"remainingEstimate",,"ПарамЗапросJira","RemainingEstimate");//fields.timetracking.Вставить("remainingEstimate", ЧасыВСтрокуДжира(ПарамЗапросJira.RemainingEstimate) );
	Если timetracking.Свойство("remainingEstimate") Тогда
		timetracking.Вставить("remainingEstimate", ЧасыВСтрокуДжира(ПарамЗапросJira.RemainingEstimate));
	КонецЕсли;
	Если timetracking.Количество()>0 Тогда
		fields.Вставить("timetracking", timetracking);
	КонецЕсли;
	//fields.timetracking.Вставить("timeSpent", ЧасыВСтрокуДжира(ПарамЗапросJira.TimeSpent) );
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
	СтрJSON = ЗаписьJSON.Закрыть();
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue";
	Если ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда //Обновить
		СсылкаНаРесурс = СсылкаНаРесурс +"/"+ПарамЗапросJira.Key;	
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
	ОписаниеОшибки = "";
	Попытка
		Если ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда //Обновить
			HTTPОтвет  =  Соединение.ВызватьHTTPМетод("PUT",HTTPЗапрос); //PUT запрос
		иначе
			HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;

	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ И НЕ (ПарамЗапросJira.ЗапросНовыйИзменить = 1) Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ  Тогда
		НовыйСтатус = ПарамЗапросJira.Status_Name;
		ЗаписьНовогоЗапроса = Ложь;
		Если НЕ ПарамЗапросJira.ЗапросНовыйИзменить = 1 Тогда
			ЗаписьНовогоЗапроса = Истина;
			JiraKey = ПолученныеДанные.Получить("key");

			ЭтаФорма["ПарамЗапросJira_Key"] = JiraKey;
			ПарамЗапросJira.Key = JiraKey; 
			
			ЭтаФорма["ПарамЗапросJira_ЗапросНовыйИзменить"] = 1;
			ПарамЗапросJira.ЗапросНовыйИзменить = 1;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ПрочитатьЗапросОбработка();
			ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
			ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
			
			ПоказатьОповещениеПользователя("Данные успешно обработаны",,
			"Запрос сохранен в Jira: "+JiraKey);
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		//Если изменился статус - выполняем одельный запрос по смене статуса:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Если НовыйСтатус <>  ПарамЗапросJira.Status_Name Тогда
			ПарамЗапросJira.Status_Name = НовыйСтатус; 
			ЭтаФорма["ПарамЗапросJira_Status_Name"] = НовыйСтатус;
			
			ИзменитьСтатусЗапросаОбработка(ДопПарам,Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусЗапросаОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	ПоказатьОповещениеПользователя("Изменяем статус в Jira",,
	""+ПредПарамЗапросJira.Status_Name+" -> "+ПарамЗапросJira.Status_Name);
	
	transition_id = "";
	//Получим файл с возможными транзакциями
	//http://it.rudolf.by:8080/rest/api/latest/issue/ELVZVRT-21/transitions?expand=transitions.fields
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.Key+"/transitions?expand=transitions.fields";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	ОписаниеОшибки = "";
	Попытка
		HTTPОтвет  = Соединение.Получить(HTTPЗапрос);
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТекстВсеТранзакции = "";
		transition_id_category = "";
		Для Каждого Эл ИЗ ПолученныеДанные.Получить("transitions") Цикл
			Эл_id = Эл.Получить("id");
			Эл_name = Эл.Получить("name");
			Эл_to = Эл.Получить("to");
			to_id = Эл_to.Получить("id");
			to_name = Эл_to.Получить("name");
			to_statusCategory = Эл_to.Получить("statusCategory"); 
			//Если to_id = issuetype_status.status_id Тогда
			//	transition_id =Эл_id;
			//	Прервать;
			//КонецЕсли;
			Если to_name = ПарамЗапросJira.Status_Name Тогда
				transition_id =Эл_id;
				Прервать;
			КонецЕсли;
			//Если to_statusCategory.Получить("id") = issuetype_status.statusCategory_id Тогда
			//	transition_id_category = Эл_id; 
			//КонецЕсли;
			ТекстВсеТранзакции = ТекстВсеТранзакции+"
			|"+СтрШаблон("Транзакция: %1 (ID = %2) -> Статус: %3 (ID = %4)",Эл_name,Эл_id,to_name,to_id); 
		КонецЦикла;
		//Если transition_id = "" Тогда
		//	transition_id = transition_id_category; 
		//КонецЕсли;
		
		Если transition_id = "" Тогда
			ТекстОшибки = СтрШаблон("Не удалось определить ""ID транзакции"" для статуса: %1",ПарамЗапросJira.Status_Name)+ТекстВсеТранзакции;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Данные = Новый Структура("transition",Новый Структура());
		transition = Данные.transition;
		transition.Вставить("id", transition_id);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
		СтрJSON = ЗаписьJSON.Закрыть();

		HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
		ОписаниеОшибки = "";
		Попытка
			HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
			СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если HTTPОтвет.КодСостояния > 299 Тогда
				ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
				//
				Текст = Новый ТекстовыйДокумент;
				Текст.УстановитьТекст(СтрокаОтвет);
				Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
		КонецПопытки;
		
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
		"Изменен статус запроса: "+ПарамЗапросJira.Key+" на """+ПарамЗапросJira.Status_Name+"""");

		ПредПарамЗапросJira.Вставить("Status_Name",ПарамЗапросJira.Status_Name);
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьЗапросWorkLogОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	//http://it.rudolf.by:8080/rest/api/2/issue/ELVZVRT-8/worklog
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.key+"/worklog";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	ПоказатьОповещениеПользователя("Получаем записи о работах из Jira",,ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+СсылкаНаРесурс);
	
	ОписаниеОшибки = "";
	Попытка
		HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТД = Объект.JiraЗапросWorkLog;
		Если ТД.Количество()>0 Тогда
			ТД.Очистить();	
		КонецЕсли;
		
		worklogs = ПолученныеДанные.Получить("worklogs");
		Для Каждого ЭлWorklog ИЗ worklogs Цикл
			НовСтр = ТД.Добавить();
			
			НовСтр.ID = ЭлWorklog.Получить("id"); 
			НовСтр.IssueID = ЭлWorklog.Получить("issueId"); 
			НовСтр.Сomment = ЭлWorklog.Получить("comment");
			НовСтр.TimeSpent = ЭлWorklog.Получить("timeSpentSeconds")/3600;
			НовСтр.Created = ПрочитатьДатуJSON( ЭлWorklog.Получить("created"), ФорматДатыJSON.ISO );
			НовСтр.Started = ПрочитатьДатуJSON( ЭлWorklog.Получить("started"), ФорматДатыJSON.ISO );
			НовСтр.Updated = ПрочитатьДатуJSON( ЭлWorklog.Получить("updated"), ФорматДатыJSON.ISO );
			
			aut = ЭлWorklog.Получить("author");
			upaut = ЭлWorklog.Получить("updateAuthor");
			
			НовСтр.Author_Name = aut.Получить("name");
			НовСтр.Author_DisplayName = aut.Получить("displayName");
			ДобавитьОбновитьПользователяВСпискеПользователейJira(НовСтр.Author_Name,НовСтр.Author_DisplayName);
			
			НовСтр.UpdateAuthor_Name = upaut.Получить("name");
			НовСтр.UpdateAuthor_DisplayName = upaut.Получить("displayName");
			ДобавитьОбновитьПользователяВСпискеПользователейJira(НовСтр.UpdateAuthor_Name,НовСтр.UpdateAuthor_DisplayName);
			
			
		КонецЦикла;
		
		ТД.Сортировать("Started УБЫВ");
		ВсегоЗаписей = ТД.Количество();
		
		Если ТипЗнч(ДопПарам)=Тип("Структура") И ДопПарам.Свойство("ТекущаяЗаписьID") И ЗначениеЗаполнено(ДопПарам.ТекущаяЗаписьID) Тогда
			МасСтр = Объект.JiraЗапросWorkLog.НайтиСтроки(Новый Структура("ID",ДопПарам.ТекущаяЗаписьID));
			Если МасСтр.Количество()>0 Тогда
				СтрИнд = МасСтр[0].ПолучитьИдентификатор();
				Элементы.JiraЗапросWorkLog.ТекущаяСтрока = СтрИнд;
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма["ПарамЗапросJira_WorklogTotal"] = ВсегоЗаписей;
		ПарамЗапросJira.Вставить("WorklogTotal",ВсегоЗаписей);
		
		ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
		ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
		
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
		"Записей получено: "+ВсегоЗаписей);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОбновитьУдалитьЗаписьWorkLogОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Операция = ДопПарам.Операция; //"Создать", "Обновить", "Удалить"
	
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	
	Если НЕ Операция = "Удалить" Тогда
		Данные = Новый Структура();
		//Записи о работах записываются от имени пользователя, который подключился в Jira
		//Данные.Вставить("author", Новый Структура());
		//Данные.author.Вставить("name",ЗаписьWorklog_Author_Name);
		
		Данные.Вставить("comment",ЗаписьWorklog_Сomment);
		Данные.Вставить("started",ПредставлениеДатыJira(ЗаписьWorklog_Started));
		Данные.Вставить("timeSpentSeconds",Формат(ЗаписьWorklog_TimeSpent*3600,"ЧГ=0"));
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.Key+"/worklog";
	Если Операция = "Обновить" 
		ИЛИ Операция = "Удалить" Тогда
		СсылкаНаРесурс = СсылкаНаРесурс +"/"+ЗаписьWorklog_ID;	
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	Если НЕ Операция = "Удалить" Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
		СтрJSON = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
	КонецЕсли;

	ОписаниеОшибки = "";
	Попытка
		
		Если Операция = "Создать" Тогда
			HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос); //POST	
		ИначеЕсли Операция = "Обновить" Тогда 
			HTTPОтвет  = Соединение.ВызватьHTTPМетод("PUT",HTTPЗапрос);  
		ИначеЕсли Операция = "Удалить" Тогда 	
			HTTPОтвет  = Соединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
		КонецЕсли;	
		
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;

	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ И Операция = "Создать" Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если Операция = "Создать" Тогда
			ДопПарам.Вставить("ТекущаяЗаписьID", ПолученныеДанные.Получить("id"));	
		КонецЕсли;
			
		ПоказатьОповещениеПользователя("Запись о работатах: "+Операция,,
		"Обработана запись с ID: "+ДопПарам.ТекущаяЗаписьID);
		
		Если Операция = "Удалить" Тогда
			ДопПарам.Удалить("ТекущаяЗаписьID");
		КонецЕсли;	
		ПрочитатьЗапросWorkLogОбработка(ДопПарам);
		ОбновитьНадписиИДоступность_ЗаписьWorkLogJira_Сервер(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВJiraСписокТрудозатрат(Команда)
	
//	ВыделенныеСтроки = Элементы.ЗатратыВремени.ВыделенныеСтроки;
//	Для каждого Элемент из ВыделенныеСтроки Цикл
//		
//		Параметры = Новый Структура;
//		Параметры.Вставить("ЗаписьWorklog_Сomment", Элемент.ЗатратыВремениОписание);
//		Параметры.Вставить("ЗаписьWorklog_Started", Элемент.ЗатратыВремениПериод);
//		Параметры.Вставить("ЗаписьWorklog_TimeSpent", Элемент.ЗатратыВремениЧасов);
//		Параметры.Вставить("ЗаписьWorklog_ID", Элемент.ЗатратыВремениID);
//		Параметры.Вставить("IssueKey", Элемент.ЗатратыВремениЗадача);
//		
//		Если ЗначениеЗаполнено(Элемент.ЗатратыВремениID) Тогда
//			Операция = "Обновить";
//		Иначе
//			Операция = "Создать";
//		КонецЕсли;
//		Параметры.Вставить("Операция", Операция);
//		ID = СоздатьОбновитьУдалитьЗаписьWorkLogДляЗатратВремени(Параметры);
////		Если Операция = "Создать" и ЗначениеЗаполнено(ID) Тогда
////			Элемент
//		
//	КонецЦикла;
	
	ВыгрузитьВJiraСписокТрудозатратНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВJiraСписокТрудозатратНаСервере()
	
	//TODO: Вставить содержимое обработчика
	
	Если Не ПроверитьИПодготовитьПараметрыПодключенияJiraСервер() Тогда
		Возврат;
	КонецЕсли;
	 
	ВыделенныеСтроки = Элементы.ЗатратыВремени.ВыделенныеСтроки;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		Запись = регистрыСведений.ЗатратыВремени.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Элемент);
		Запись.Прочитать();	
			
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьWorklog_Сomment", Запись.Описание);
		ПараметрыЗаписи.Вставить("ЗаписьWorklog_Started", Запись.Период);
		ПараметрыЗаписи.Вставить("ЗаписьWorklog_TimeSpent", Запись.Часов);
		ПараметрыЗаписи.Вставить("ЗаписьWorklog_ID", Запись.ID);
		ПараметрыЗаписи.Вставить("IssueKey", Запись.Задача.Код);
		
		Если ЗначениеЗаполнено(Запись.ID) Тогда
			Операция = "Обновить";
		Иначе
			Операция = "Создать";
		КонецЕсли;
		ПараметрыЗаписи.Вставить("Операция", Операция);
		ID = СоздатьОбновитьУдалитьЗаписьWorkLogДляЗатратВремени(ПараметрыЗаписи);
		Если Операция = "Создать" и ЗначениеЗаполнено(ID) Тогда
			Запись.ID = ID;
			Запись.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбновитьУдалитьЗаписьWorkLogДляЗатратВремени(Параметры)
	
	Отказ = ложь;
	
	Операция = Параметры.Операция; //"Создать", "Обновить", "Удалить"
	Сomment = Параметры.ЗаписьWorklog_Сomment;
	Started = Параметры.ЗаписьWorklog_Started;
	TimeSpent = Параметры.ЗаписьWorklog_TimeSpent;
	ID = Параметры.ЗаписьWorklog_ID;
	IssueKey = Параметры.IssueKey;
	
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	
	Если НЕ Операция = "Удалить" Тогда
		Данные = Новый Структура();
		//Записи о работах записываются от имени пользователя, который подключился в Jira
		//Данные.Вставить("author", Новый Структура());
		//Данные.author.Вставить("name",ЗаписьWorklog_Author_Name);
		
		Данные.Вставить("comment",Сomment);
		Данные.Вставить("started",ПредставлениеДатыJira(Started));
		Данные.Вставить("timeSpentSeconds",Формат(TimeSpent*3600,"ЧГ=0"));
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/" + IssueKey + "/worklog";
	Если Операция = "Обновить" 
		ИЛИ Операция = "Удалить" Тогда
		СсылкаНаРесурс = СсылкаНаРесурс +"/" + ID;	
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	Если НЕ Операция = "Удалить" Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
		СтрJSON = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
	КонецЕсли;

	ОписаниеОшибки = "";
	Попытка
		
		Если Операция = "Создать" Тогда
			HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос); //POST	
		ИначеЕсли Операция = "Обновить" Тогда 
			HTTPОтвет  = Соединение.ВызватьHTTPМетод("PUT",HTTPЗапрос);  
		ИначеЕсли Операция = "Удалить" Тогда 	
			HTTPОтвет  = Соединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
		КонецЕсли;	
		
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: " + HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ И Операция = "Создать" Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Операция = "Создать" Тогда
		Возврат ПолученныеДанные.Получить("id");	
	КонецЕсли;
		
	Возврат ЗаписьWorklog_ID;			
	
КонецФункции





&НаКлиенте
Процедура ПрочитатьЗапросCommentsОбработка(ДопПарам=Неопределено, Отказ=Ложь)
	Если ПарамСерверJira.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПарамСерверJira.JiraСерверHost, , , , , 60, ssl);
	
	//GET /rest/api/2/issue/{issueIdOrKey}/comment
	//Предполагаем что больше 1000 комментариев к запросу не будет!
	СсылкаНаРесурс = ПарамСерверJira.JiraАдресRestAPI+"/issue/"+ПарамЗапросJira.key+"/comment/?&maxResults=1000";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,ПарамСерверJira.ЗаголовкиHTTP);
	
	ПоказатьОповещениеПользователя("Получаем комментарии к запросам из Jira",,ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+СсылкаНаРесурс);
	
	ОписаниеОшибки = "";
	Попытка
		HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
			//
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(СтрокаОтвет);
			Текст.Показать("Неудача! Код состояния: "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,,Отказ);
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	HTTPОтвет = Неопределено;
	
	//Преобразуем JSON в Соответствие ПолученныеДанные 
	Если НЕ Отказ Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаОтвет);
		ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
		Чтение.Закрыть();
		Если ПолученныеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать данные JSON",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТД = Объект.JiraЗапросComments;
		Если ТД.Количество()>0 Тогда
			ТД.Очистить();	
		КонецЕсли;
		
		comments = ПолученныеДанные.Получить("comments");
		Для Каждого Эл ИЗ comments Цикл
			НовСтр = ТД.Добавить();
			
			НовСтр.ID = Эл.Получить("id"); 
			НовСтр.IssueID = ПарамЗапросJira.ID; 
			НовСтр.Body = Эл.Получить("body");
			НовСтр.Created = ПрочитатьДатуJSON( Эл.Получить("created"), ФорматДатыJSON.ISO );
			НовСтр.Updated = ПрочитатьДатуJSON( Эл.Получить("updated"), ФорматДатыJSON.ISO );
			
			aut = Эл.Получить("author");
			upaut = Эл.Получить("updateAuthor");
			
			НовСтр.Author_Name = aut.Получить("name");
			НовСтр.Author_DisplayName = aut.Получить("displayName");
			ДобавитьОбновитьПользователяВСпискеПользователейJira(НовСтр.Author_Name,НовСтр.Author_DisplayName);
			
			НовСтр.UpdateAuthor_Name = upaut.Получить("name");
			НовСтр.UpdateAuthor_DisplayName = upaut.Получить("displayName");
			ДобавитьОбновитьПользователяВСпискеПользователейJira(НовСтр.UpdateAuthor_Name,НовСтр.UpdateAuthor_DisplayName);
			
			//https://it.rudolf.by:8480/browse/ELVZVRT-129?focusedCommentId=21540&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-21540
			НовСтр.CommentLink = ПарамСерверJira.JiraСерверПротокол+ПарамСерверJira.JiraСерверHost+"/browse/"+ПарамЗапросJira.Key+"?focusedCommentId="+НовСтр.ID
				+"&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-"+НовСтр.ID
			
		КонецЦикла;
		
		ТД.Сортировать("Created УБЫВ");
		ВсегоЗаписей = ТД.Количество();
		
		ЭтаФорма["ПарамЗапросJira_CommentTotal"] = ВсегоЗаписей;
		ПарамЗапросJira.Вставить("CommentTotal",ВсегоЗаписей);
		
		ОбновитьНадписиИДоступность_ПарамЗапросJira_Сервер();
		ЗаполнитьСпискиВыбораПользователейПоСпискуПользователей();
		
		ПоказатьОповещениеПользователя("Данные успешно обработаны",,
		"Записей получено: "+ВсегоЗаписей);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CreateNewTask(Команда)
	IndexRow = Элементы.JiraСписокЗапросов.ТекущаяСтрока;
	Task = NewTaskНаСервере(IndexRow);
	If ValueIsFilled(Task) Then 
		ОткрытьЗначениеАсинх(Task);
	EndIf;
	
КонецПроцедуры

&НаСервере
Function NewTaskНаСервере(IndexRow)
	
	CurrentRow = Объект.JiraСписокЗапросов.НайтиПоИдентификатору(IndexRow);
	Если CurrentRow = Неопределено Тогда
		Возврат Undefined;
	КонецЕсли;
	
	НоваяЗадача = Справочники.Задачи.НайтиПоКоду(CurrentRow.Кey);
	Если ValueIsFilled(НоваяЗадача) Тогда
		Return НоваяЗадача;
	КонецЕсли;
	
	НоваяЗадача = Справочники.Задачи.СоздатьЭлемент();
	НоваяЗадача.Дата = ТекущаяДатаСеанса();
	НоваяЗадача.Код = CurrentRow.Кey;
	НоваяЗадача.Наименование = CurrentRow.Summary;
	НоваяЗадача.ПолноеНаименование = CurrentRow.Кey + " - " + CurrentRow.Summary;
	НОваяЗадача.HttpRef = CurrentRow.BrowseLink;
	НоваяЗадача.Описание = (
		CurrentRow.Кey + Символы.ПС +
		"// " + CurrentRow.Кey + Символы.ПС +
		Символы.ПС +
		"//-> " + CurrentRow.Кey + " - " + CurrentRow.Summary + Символы.ПС +
		Символы.ПС +
		"//<- " + CurrentRow.Кey
	);
	
	Попытка
		НоваяЗадача.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Return НоваяЗадача.Ссылка;
	
EndFunction

#КонецОбласти